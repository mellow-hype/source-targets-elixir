# Set the toolchain path
# include your PID here!!!
export PRODUCT_ID=0x09400006
export PRODUCT_NAME=WR940NV6
export BOARD_TYPE=ap151
export CFG_BOARD_TYPE=ap151
export TOOLCHAIN=gcc-4.3.3
export TOOLPREFIX=mips-linux-uclibc-
export TOOLARCH=build_mips/staging_dir/usr
export UBOOT_GCC_4_3_3_EXTRA_CFLAGS=-fPIC
export TPWD_FOR_LINUX_CAL=0

export KERNEL=mips-linux-2.6.31
export KERNELVER=2.6.31
export KERNELTARGET=vmlinux.bin
export COMPRESSKERNEL=y
export KERNELARCH=mips
export FLASH_SIZE=4

export CONFIG_TLWR941_LANPORT=1

ifndef PERF_PWR_OFFLOAD_DIR_PATH
export PERF_PWR_OFFLOAD_DIR_PATH=$(TOPDIR)/$(BOARD_TYPE)/wlan/firmware
endif



#export ATH_DUAL_FLASH=1
ifeq ($(BOOT_FROM_NAND),1) #{
# should be multiple of 128k
export ATH_CAL_NAND_FLASH=1
export ATH_CAL_NAND_PARTITION="caldata"
else #}{
ifeq ($(ATH_DUAL_FLASH),1) #{
export ATH_CAL_NAND_FLASH=1
export ATH_CAL_NAND_PARTITION="caldata"
endif #}
endif #}

export CONFIG_MIPS_74K_KERNEL_OPTIMIZATION=1
#export CONFIG_EMULATION=1
#export BOOT_FROM_NAND=1
export ATH_SUPPORT_CWM=1
export ATH_CAP_CWM=1

export COMPRESSED_UBOOT=1
export TARGETFSSIZE=3080192
export BUILD_OPTIMIZED=y

export BUSYBOX=busybox-1.01
export WIRELESSTOOLS=wireless_tools.29
export WIRELESSTOOLSLIB=libiw.so.29

export BUILD_WPA2=y

ifeq ($(USE_GCC_4_5_1), y) #{
export TOOLCHAIN=gcc-4.5.1
export ENABLE_DSP_ASE=y
endif #}

ifeq ($(BUILD_WLAN_PBO_DATA),y) #{
export GCOV_KERNEL_ENABLE=y
export WLAN_PBO_DATA_PATH=$(TOPDIR)/build/scripts/$(CFG_BOARD_TYPE)/pbo_data/wlan
endif #}

ifeq ($(USE_WLAN_PBO_DATA),y) #{
export GCOV_KERNEL_ENABLE=y
export WLAN_PBO_DATA_PATH=$(TOPDIR)/build/scripts/$(CFG_BOARD_TYPE)/pbo_data/wlan
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753 ap151)) #{
export BUS=AHB
export AP_TYPE=single
else #}{
export BUS=dual
export AP_TYPE=dual
endif #}

#Disable pci bus
#export AH_CAL_RADIOS_PCI=1
#ifeq ($(ATH_CAL_NAND_FLASH),1) #{
#        export AH_CAL_LOCATIONS_PCI=0x4000
#else #}{
#        export AH_CAL_LOCATIONS_PCI=0xbfff4000
#endif #}

export AH_CAL_IN_FLASH_AHB=1
export AH_CAL_RADIOS_AHB=1
ifeq ($(ATH_CAL_NAND_FLASH),1) #{
        export AH_CAL_LOCATIONS_AHB=0x0
else #}{
        export AH_CAL_LOCATIONS_AHB=0xbfff0000
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753 ap151)) #{
export ATH_SUPPORT_DFS=0
else #}{
export ATH_SUPPORT_DFS=1
endif #}

export MADWIFITARGET=mipsisa32-be-elf
export FUSIONTARGET=mipsisa32-be-elf
export TARGETARCH=mipsisa32-be-elf

# Ethernet defines
export GMAC_QCA956x=1

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753 ap151)) #{
export COMPRESSED_UBOOT = 1
export ETH_CONFIG=_s27
export ATH_GMAC_GE1_IS_CONNECTED=1
export ATH_GMAC0_MII=ATHR_MII
export ATH_GMAC1_MII=ATHR_RGMII
export ATH_CFG_SGMII=1
export FLASH_SIZE=4
#export BUILD_OPTIMIZED=y
export ATH_LINK_INTR=1
endif #}
ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 ap151)) #{
export pll=CFG_PLL_750_400_250
export ddr_cas=4
export ETH_SOFT_LED=0
export ATH_GMAC_WAN_PORT_LED_BLUE=-1
export ATH_GMAC_WAN_PORT_LED_ORANGE=-1
export ATH_GMAC_WAN_PORT_LED=-1
export ATH_GMAC_LAN_PORT1_LED=7
export ATH_GMAC_LAN_PORT2_LED=7
export ATH_GMAC_LAN_PORT3_LED=7
export ATH_GMAC_LAN_PORT4_LED=7

# shutdown ath led ctrl, instead through wifi button webserver thread
#export ATH_SUPPORT_LED=1
#export ATH_24G_LED_GPIO=8

endif #}
ifneq (,$(findstring $(CFG_BOARD_TYPE),tb753)) #{
export pll=CFG_PLL_750_400_250
export ddr_cas=4
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),tb754)) #{
export pll=CFG_PLL_750_400_250
export ddr_cas=4
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap152 tb755)) #{
export ETH_CONFIG=_s17
#export ETH_CONFIG2=_s17
export ATH_GMAC_GE0_IS_CONNECTED=1
export ATH_GMAC0_MII=ATHR_SGMII
export ATH_GMAC1_MII=ATHR_SGMII
export ATH_S17_MAC0_SGMII=1
export ATH_CFG_SGMII=1
export ATH_SGMII_FORCED=1
export ATH_CONFIG_SWAP_SGMII=0
export AH_CAL_IN_FLASH_PCI=1
export ATH_SGMII_FORCED=1
export FLASH_SIZE=8
export BUILD_CONFIG=_vlan
export ATH_LINK_INTR=1
export ATH_S17INT_GPIO=10
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),tb755)) #{
export pll=CFG_PLL_750_667_250
export ddr_cas=6
endif #}

ifeq ($(CFG_BOARD_TYPE),dragonflyemu) #{
export ETH_CONFIG=_s27
export ATH_GMAC_GE1_IS_CONNECTED=1
export ATH_GMAC0_MII=ATHR_RGMII
export ATH_GMAC1_MII=ATHR_SGMII
export ATH_CFG_SGMII=1
endif #}

export BUILD_ATHR_HOSTAP=1

export ATH_GMAC_RX_TASKLET=1
#export ATH_DMA_CHECK=1

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap151)) #{
export ATH_DMA_CHECK=1
export ATH_GMAC_RX_PKT_CNT=32
export ATH_GMAC0_TX_CNT=128
export ATH_GMAC0_RX_CNT=128

export ATH_GMAC1_TX_CNT=128
export ATH_GMAC1_RX_CNT=128
export ATH_GMAC_DESC_SRAM=1
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249 tb753 tb754)) #{
export ATH_DMA_CHECK=1
export ATH_GMAC_RX_PKT_CNT=32
export ATH_GMAC0_TX_CNT=128
export ATH_GMAC0_RX_CNT=128

export ATH_GMAC1_TX_CNT=128
export ATH_GMAC1_RX_CNT=128
export ATH_GMAC_DESC_SRAM=1
endif #}

ifneq (,$(findstring $(CFG_BOARD_TYPE),ap152 tb755)) #{
export ATH_GMAC_RX_PKT_CNT=160
export ATH_GMAC0_TX_CNT=128
export ATH_GMAC0_RX_CNT=224

export ATH_GMAC1_TX_CNT=128
export ATH_GMAC1_RX_CNT=224
export ATH_GMAC_DESC_SRAM=1
endif #}
export ATH_GMAC1_RXFCTL=1
export ATH_GMAC1_TXFCTL=1

export ATH_GMAC0_RXFCTL=1
export ATH_GMAC0_TXFCTL=1


export ATH_GMAC_HW_QOS=0


export ATH_GMAC_LEN_PER_TX_DS=1536
export ATH_GMAC_LOCATION=0xbfff0000


#ifneq ($(ETH_CONFIG),_s27)
#export BUILD_EXT=$(ETH_CONFIG)$(ETH_CONFIG2)
#endif

export BUILD_UMAC=1

# Set Phy Err Diagnostics (Radar detection) to be enabled for AP builds
export ATH_CAP_PHYERR_DIAG=1

export AR5416_G_MODE=1
export AR9100=0
export AR7240_EMU=0
ifeq ($(BUILD_WMACEMU),1) #{
export AH_DEBUG=1
else #}{
export AH_DEBUG=0
endif #}

export AH_SUPPORT_AR5210=0
export AH_SUPPORT_AR5212=0
export AH_SUPPORT_5111=0
export AH_SUPPORT_5112=0
export AH_SUPPORT_2413=0
export AH_SUPPORT_5111=0
export AH_SUPPORT_5112=0
export AH_SUPPORT_2413=0
export AH_SUPPORT_5413=0
export AH_SUPPORT_2316=0
export AH_SUPPORT_2317=0
export AH_SUPPORT_2425=0
export AH_SUPPORT_SOWL=0
export AH_SUPPORT_AR5416=1
ifeq ($(BUILD_WMACEMU),1) #{
export AR9340_EMULATION=1
export AR9550_EMULATION=1
export AR9560_EMULATION=1
export AR9300_EMULATION=1
export AR9300_EMULATION_BB=1
endif #}
export AH_SUPPORT_KITE_ANY=0
export AH_SUPPORT_KITE_10=0
export AH_SUPPORT_KITE_12=0
export AH_SUPPORT_KIWI_10=0
export AH_SUPPORT_KIWI_ANY=0
export AH_SUPPORT_KIWI_11=0
export AH_SUPPORT_K2=0
export AH_SUPPORT_EEPROM_AR9287=0
export ATH_SUPPORT_VLAN=0


export ATH_CHAINMASK_SELECT=0
ifneq (,$(findstring $(CFG_BOARD_TYPE),cus249)) #{
export ATH_RXBUF=256
export ATH_TXBUF=256
else #ap151
export ATH_RXBUF=512
export ATH_TXBUF=768
endif
export ATH_CAP_AMSDU=0
export IEEE80211_MCAST_ENHANCEMENT=1
export ATH_RB=0
export AR5416_G_MODE=1
export AH_SUPPORT_HOWL=0
export AH_SUPPORT_OWL=0
export AR5416_INT_MITIGATION=1
export ATH_SUPPORT_IQUE=1
export ATH_SUPPORT_MCAST2UCAST=1
export ATH_SUPPORT_GREEN_AP=0
export ATH_SUPPORT_DYN_TX_CHAINMASK=1
export AH_DESC_NOPACK=1
export ATH_SUPPORT_PAPRD=0
# export ATH_TRAFFIC_FAST_RECOVER=1

# Added by chenxuan to disable this feature for default
ifneq ($(11AC_OFFLOAD), 1)
export UMAC_SUPPORT_DFS=0
export UMAC_SUPPORT_NAWDS=0
export UMAC_SUPPORT_IBSS=0
export ATH_NO_5G_SUPPORT=1
export OL_ATH_SUPPORT_LED_POLL=0
export ATH_TX_DROP_POLICY=0
export ATH_SUPPORT_IBSS_PERSTA_HWKEY=0
export ATH_SUPPORT_IBSS_WPA2=0
export ATHEROS_LINUX_PERIODIC_SCAN=0#Disable this feature without stavap
export UMAC_SUPPORT_PERIODIC_PERFSTATS=0
export OL_ATH_SUPPORT_STATS=0
export UMAC_SUPPORT_STA_POWERSAVE=0
export ATH_SUPPORT_IBSS=0
export ATH_SUPPORT_UAPSD=1
#export ATH_SUPPORT_DEFERRED_NODE_CLEANUP=0
endif

export AH_SUPPORT_DRAGONFLY=1
export AH_SUPPORT_WASP=0
export ATH_GEN_RANDOMNESS=1

ifeq ($(BUILD_WPA2),y) #{
export ATH_WPS_IE=1
else #}{
export ATH_WPS_IE=0
endif #}

ifeq ($(BUILD_SAMBA),y) #{

export SAMBA_MIPS_74K_CFLAGS=-funit-at-a-time -Os -pipe -march=74kc -mtune=74kc

#Populate the utilities to be removed

sbin_list1=sbin/802* sbin/apst* sbin/ath* sbin/ifr* sbin/iwe*
sbin_list2=sbin/iwsp* sbin/iwli* sbin/radar* sbin/iwge* sbin/pktl*
samba_list=usr/local/bin/* usr/local/sbin/nmb* usr/local/sbin/smb*nt

export INSTALL_BLACKLIST="usr/bin/gdb* $(sbin_list1) $(sbin_list2) $(samba_list)"

endif #}


#export ATH_SST_FLASH=y
#export ATH_DUAL_FLASH=1
#export EXTRAVERSION=-9.2.0.39.3
#export ATH_SINGLE_CFG=1
export ATH_EXT_AP=1

export ATH_SUPPORT_QUICK_KICKOUT=1
export ATH_SUPPORT_TxBF=0
#export ATH_SUPPORT_WEP_MBSSID=1
#export ATH_LOW_POWER_ENABLE=1
export ATH_TX_BUF_FLOW_CNTL=1

export TARGET_POWER_BY_TPSCALE_DEC=1
export TARGET_POWER_ADJUST_PER_RATE=1

export KBUILD_MODPOST_WARN=y

#Remove the example files in apps/wpa2 directory
export BUILD_WPA2_NO_EXAMPLES=y

export ATH_SUPPORT_DESC_CACHABLE=1
export ATH_TXQ_BH_LOCK=1

#turn on ap-only code
export UMAC_SUPPORT_APONLY=1
export ATH_WDS_SUPPORT_APONLY=1

export ATH_SUPPORT_WIFIPOS=0
export ATH_SUPPORT_RX_PROC_QUOTA=0

export ATH_SUPPORT_DESC_CACHABLE=1
export ATH_TXQ_BH_LOCK=1

export ATH_DEBUG=0
export UMAC_SUPPORT_TX_FRAG=0
export ATH_TX_COMPACT=1
export ATH_INT_TX_MITIGATION=1

ifneq ($(strip $(CONFIG_BASIC)),1) #{
export ATH_SUPPORT_VOWEXT=0
export ATH_VOW_EXT_STATS=0

export DIRECT_ATTACH=1
#export UMAC_SUPPORT_VI_DBG=1

# Spectral Analysis support
export ATH_SUPPORT_SPECTRAL=0

export ATH_SUPPORT_VOW_DCS=0

# ifneq (,$(findstring $(CFG_BOARD_TYPE),ap151 ap152 tb754 tb755)) #{
# export ATH_SUPPORT_TX99=1
# endif #}


# Periodically measure performance stats such as throughput, PER
# But enabling this option can affect peak performance slightly.
export UMAC_SUPPORT_PERIODIC_PERFSTATS=0

# Measure channel utilization
# Enabling this option can affect peak performance slightly.
export UMAC_SUPPORT_CHANUTIL_MEASUREMENT=0

#enable BSS load support
export UMAC_SUPPORT_BSSLOAD=0
#enable radio measurement support for voice enterprise
export UMAC_SUPPORT_RRM=0
#enable wireless network management support for voice enterprise
export UMAC_SUPPORT_WNM=0
#enable WMM admission control support for voice enterprise
export UMAC_SUPPORT_ADMCTL=0
#enable quiet period support
export UMAC_SUPPORT_QUIET=0
#enable UAPSD RATECTL
export ATH_SUPPORT_UAPSD_RATE_CONTROL=0
# Randomness generation support from hardware
export ATH_GEN_RANDOMNESS=1

# IEEE 802.11v Proxy ARP
export UMAC_SUPPORT_PROXY_ARP=0

# Hotspot 2.0 DGAF Disable support
export UMAC_SUPPORT_DGAF_DISABLE=0

# Hotspot 2.0 L2 Traffic Inspection and Filtering support
export UMAC_SUPPORT_HS20_L2TIF=0
export ATH_SUPPORT_HS20=0

# Disable STA mode support to gain some CPU cycles
export UMAC_SUPPORT_STA_MODE=0
export ATH_HW_TXQ_STUCK_WAR=1

#Disable increment of some node level stats in the Tx data path
#to gain a (small) improvement in CPU utilization.
export UMAC_SUPPORT_TXDATAPATH_NODESTATS=0

endif #}
ifneq ($(11AC_OFFLOAD), 1)
# S/W retry mechanism (in addition to H/W retries) +
# TID queue pause/unpause and ps-poll handling in LMAC
export ATH_SWRETRY=0
# ATH_SWRETRY_MODIFY_DSTMASK enables HW optimization to filter pkts on
# failures.
export ATH_SWRETRY_MODIFY_DSTMASK=0
endif
#ifneq ($(ETH_CONFIG),_s27)
#ifneq ($(11AC_OFFLOAD), 1) 
#export BUILD_EXT=$(ETH_CONFIG)$(ETH_CONFIG2)
#else
#export BUILD_EXT=_11ac_offload$(ETH_CONFIG)$(ETH_CONFIG2)
#endif
#endif
#Disable pktlog by default
export REMOVE_PKT_LOG=1

# Include performance_power offload support for 11ac
ifeq ($(11AC_OFFLOAD), 1)
export QCA_OL_11AC_FAST_PATH=1
export ATH_11AC_TXCOMPACT=1
export UMAC_SUPPORT_VAP_PAUSE=1
export ATH_VAP_PAUSE_SUPPORT=1
export ATH_PERF_PWR_OFFLOAD=1
export ATH_TGT_TYPE=AR9888
export ATH_HIF_TYPE=pci
export FORCE_LEGACY_PCI_INTERRUPTS=1
export LOAD_ARRAY_FW=1
export WDI_EVENT_ENABLE=1

# 0: 128B - default, 1: 256B, 2: 64B
export ATH_OL_11AC_DMA_BURST=1
export ATH_OL_11AC_MAC_AGGR_DELIM=0

endif
export BIG_ENDIAN_HOST=1
export ATH_SUPPORT_KEYPLUMB_WAR=1
export ATH_SUPPORT_TIDSTUCK_WAR=1
export LMAC_SUPPORT_POWERSAVE_QUEUE=1

#ifneq (,$(findstring $(CFG_BOARD_TYPE),ap151-020 ap151 ap152)) #{
# Set the below to 1 to enable Intelligent Channel Manager (ICM) support.
# Note that currently, a pre-requisite is that ATH_SUPPORT_SPECTRAL should
# be 1.
#export ATH_SUPPORT_ICM=1
#export ATH_SUPPORT_HYFI_ENHANCEMENTS=1
#ifeq ($(ATH_SUPPORT_HYFI_ENHANCEMENTS), 1)
#export ATH_SUPPORT_DSCP_OVERRIDE=1
#endif
#endif #}

# wireless feature add by TP
export TP_FEATURE_WDS_3ADDR_AGING=1
export TP_FEATURE_GET_WIRELESS_STATE=1
export TP_FEATURE_GET_SCAN_KEY_TYPE=1
export TP_FEATURE_WLAN_STA_ADDRTYPE=1
export TP_FEATURE_SUPPORT_IGMP_MASK=1
export TP_FEATURE_REPEATER_MODE_EHANCED=1

#wlan qos
export LMAC_SUPPORT_RESERVED_TXBUF=1
export UMAC_SUPPORT_BANDWIDTH_QUEUE=0
export ATH_TX_BUF_FLOW_CNTL=1
export DEBUG_BANDWIDTH_FEATURE=0
export ATH_SUPPORT_TX_OPT_RETRY=0
export ATH_SUPPORT_TX_SCHED_OPT=1
#export AR_DEBUG=1
export TP_IEEE80211_RELEASE_BAR_UMAC=1
#export IEEE80211_DEBUG_NODELEAK=1

#for firmware recovery use
export FW_RECOVERY=y
export FW_RECOVERY_DEV=wr940nv6
#use factory reset button
export FW_INPUT_BUTTON_GPIO=1
#use wps led gpio
export FW_OUTPUT_LED_GPIO=3
export FW_OUTPUT_LED_ON=0

export RESET_LMZ_SIZE=1
export LMZ_BLK_SIZE=262144

export TP_FEATURE_AP_CHANFOLLOW=1
export TP_FEATURE_AP_EXTOFFSETFOLLOW=1
export TP_FEATURE_LIMIT_SCANENTRY=1
export TP_TEATURE_MI_NODE_MAC_CONFLICT=1

export TP_FEATURE_FS_EXTEND_SIZE=y
export TP_FEATURE_ETH_DELAY=1

IMAGE_ENET=ag7240	
IMAGE_LANG=en
IMAGE_OEMDIR=WR940N6.0_CA
IMAGE_FS_SIZE=0x2E0000
GPL_PACKAGE_NAME=TL-WR940NV6_GPLexport DEV_NAME=wr940nv6_ca
export OPENSOURCE_BUILD=y
