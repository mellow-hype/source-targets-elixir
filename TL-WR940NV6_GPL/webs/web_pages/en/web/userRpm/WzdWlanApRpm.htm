
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<SCRIPT type="text/javascript">
var t_zujian = new Array
(
"t_wds_ssid",			0,	0,	0,	0,	1,	0,
"t_wds_bssid",			0,	0,	0,	0,	1,	0,
"t_wds_survey",			0,	0,	0,	0,	1,	0,
"t_wds_surcey_note",	0,	0,	0,	0,	1,	0,
"t_wds_show",			0,	0,	0,	0,	1,	0,
"t_wds_space",			0,	0,	0,	0,	1,	0,
"t_wds_sec_mode",		0,	0,	0,	0,	1,	0,
"t_wds_sec_note2",		0,	0,	0,	0,	1,	0,
"t_wds_key_format",		0,	0,	0,	0,	1,	0,
"t_wds_wep_index",		0,	0,	0,	0,	1,	0,
"t_wds_auth_type",		0,	0,	0,	0,	1,	0,
"t_wds_password",		0,	0,	0,	0,	1,	0,
"t_ssid_ap",			1,	0,	0,	0,	1,	1,
"t_ssid_client",		0,	0,	1,	0,	0,	0,
"t_ssid_client_mac",	0,	0,	1,	0,	0,	0,
"t_ssid_client_wds",	0,	0,	1,	0,	0,	0,
"t_ssid_rep",			0,	0,	0,	1,	0,	0,
"t_ssid_rep_name",		0,	0,	0,	1,	0,	0,
"t_ssid_rep_mac",		0,	0,	0,	1,	0,	0,
"t_client_rpt_survey",	0,	0,	1,	1,	0,	0,
"t_ssid_rep_warn",		0,	0,	1,	1,	0,	0,
"t_ssid_multi_vlan",	0,	1,	0,	0,	0,	0,
"t_ssid_multi_1",		0,	1,	0,	0,	0,	0,
"t_ssid_multi_2",		0,	1,	0,	0,	0,	0,
"t_ssid_multi_3",		0,	1,	0,	0,	0,	0,
"t_ssid_multi_4",		0,	1,	0,	0,	0,	0,
"t_region_r",			1,	1,	1,	1,	1,	1,
"t_region_warn",		1,	1,	1,	1,	1,	1,
"t_channel",			1,	1,	0,	0,	1,	1,
"t_bridge_ssid_space",	0,	0,	0,	0,	0,	1,
"t_bridge_ssid_scan",	0,	0,	0,	0,	0,	1,
"t_bridge_ssid_1",		0,	0,	0,	0,	0,	1,
"t_bridge_ssid_2",		0,	0,	0,	0,	0,	1,
"t_bridge_ssid_3",		0,	0,	0,	0,	0,	1,
"t_bridge_ssid_4",		0,	0,	0,	0,	0,	1,
"t_bridge_ssid_warn",	0,	0,	0,	0,	0,	1,
"t_sec_mode",			1,	1,	1,	1,	1,	1,
"t_ext_ssid_title",		0,	0,	0,	1,	0,	0,
"t_ext_ssid_name",		0,	0,	0,	1,	0,	0,
"t_ext_ssid_title2",	0,	0,	0,	1,	0,	0,
"t_ext_ssid_name2",		0,	0,	0,	1,	0,	0,
1
);

var t_sec_zujian = new Array
(					 
"t_multi_sec",		   -1,	5, -1, -1, -1, -1,
"t_none_warn",			0,	0,	0,	0,	0,	0,
"t_s_wep",				-1,	-1,	-1,	-1,	-1,	-1,
"t_warn_wep",			1,	-1,	1,	1,	1,	1,
"t_s_wep_type",			1,	-1,	1,	1,	1,	1,
"t_s_wep_form",			1,	-1,	1,	1,	1,	1,
"t_s_wep_key",			1,	-1,	1,	1,	1,	1,
"t_s_psk_ver",			-1,	-1,	-1,	-1,	-1,	3,
"t_s_psk_encry",		-1,	-1,	-1,	-1,	-1,	3,
"t_s_psk",				3,	3,	3,	3,	3,	3,
"t_warn_psk",			3,	3,	3,	3,	3,	3,
"t_s_psk_per",			-1,	-1,	-1,	-1,	-1,	3,
"t_multi_save",			-1,	5,	-1,	-1,	-1,	-1,
1
);

var t_survey_zujian = new Array(
"ssid_client",//0
"mac_client",
"rptSsid",
"rptBssid",
"mptBssid1",
"mptBssid2",
"mptBssid3",
"mptBssid4",
"channel",
"wds_enable",//9
"Region",
"uni_wds_r",
"secType",
"wepSecret",
"wepSecOpt",
"keytype",
"keynum",
"key1",
"key2",
"key3",
"key4",
"length1",
"length2",
"length3",
"length4",
"pskSecOpt",
"pskCipher",
"pskSecret",
"interval",//28
1
);

var key1dis = 0;
var key2dis = 0;
var key3dis = 0;
var key4dis = 0;
var keylength1 = 10;
var keylength2 = 10;
var keylength3 = 10;
var keylength4 = 10;
var is_Hex = true;

var randomlength = 0;

function doSurvey()
{
var wzd_url = "1=1";
var i = 0;
var mun = 0;
while(t_survey_zujian[i]!=1)
{
if(t_survey_zujian[i] == "uni_wds_r")
{
if(document.forms[0].uni_wds_r[0].checked == true)
num = 0;
else
num = 1;
wzd_url += "&"+t_survey_zujian[i] + "=" + num;
}
else if(t_survey_zujian[i] == "keynum")
{
if(document.forms[0].keynum[0].checked == true)
num = 0;
else if(document.forms[0].keynum[1].checked == true)
num = 1;
else if(document.forms[0].keynum[2].checked == true)
num = 2;
else if(document.forms[0].keynum[3].checked == true)
num = 3;
else 
num = 0;
wzd_url += "&"+t_survey_zujian[i] + "=" + num;
}
else
{
wzd_url += "&"+t_survey_zujian[i] + "=" + document.getElementById(t_survey_zujian[i]).value;
}
i++;
}

location.href="WzdWlanSiteSurveyRpm_AP.htm?" + wzd_url;
}

function aftersurvey()
{
var cf = document.forms[0];
var i = 0;
if(Number(wzdSurvey[29]) == 0)
{
return ;
}
else  if(Number(wzdSurvey[29]) == 1  || wzdSurvey[29] == 2)
{
i = 0;
while(t_survey_zujian[i]!=1)
{
if(t_survey_zujian[i] == "uni_wds_r")
{
document.forms[0].uni_wds_r[wzdSurvey[i]].checked = true;
}
else if(t_survey_zujian[i] == "keynum")
{
document.forms[0].keynum[wzdSurvey[i]].checked = true;
}
else
{
document.getElementById(t_survey_zujian[i]).value = wzdSurvey[i];
}
i++;
}
if( Number(wzdSurvey[29]) == 2)
{
cf.channel.value = wzdSurvey[32];
switch(wzdWlanInf[39])
{
case 3: 
cf.ssid_client.value = wzdSurvey[30];
cf.mac_client.value = wzdSurvey[31];
break;
case 4: 
cf.rptSsid.value = wzdSurvey[30];
cf.rptBssid.value = wzdSurvey[31]; 
break;
case 6:
cf.brlssid.value = wzdSurvey[30];
cf.brlbssid.value = wzdSurvey[31];
break;
case 7: 
if(cf.mptBssid1.value == "")
cf.mptBssid1.value = wzdSurvey[31];
else if(cf.mptBssid2.value == "")
cf.mptBssid2.value = wzdSurvey[31];
else if(cf.mptBssid3.value == "")
cf.mptBssid3.value = wzdSurvey[31];
else if(cf.mptBssid4.value == "")
cf.mptBssid4.value = wzdSurvey[31];
else
cf.mptBssid1.value = wzdSurvey[31];
break;
default: 
break;
}
}
}

if(wzdSurvey[34] == 1)	//connect
{
if(wzdWlanInf[39] == 6)	//bridge(wds)
{
cf.wds_keytype.value = wzdSurvey[33];
if(wzdSurvey[33] == 2)
{
document.getElementById("t_wds_sec_note1").style.display = "";
}
else
{
document.getElementById("t_wds_sec_note1").style.display = "none";
}
}
else	//client ,rpt, mpt
{	
cf.secType.value = wzdSurvey[33];
if (6 == wzdSurvey[33]||2 == wzdSurvey[33]||3 == wzdSurvey[33])
{
cf.secType.value = 3;
}
if(wzdSurvey[33] == 1)
{
document.getElementById("t_cliet_sec_note").style.display = "";
}
else
{
document.getElementById("t_cliet_sec_note").style.display = "none";
}
}
}
}

function getValLen(val)
{
var len = 0;
var i = 0;
for (i = 0; i < val.length; i ++)
{
var c = val.charAt(i);
len += ((c >= ' ') && (c <= '~')) ? 1 : 2;
}
return len;
}
function checkssid(ssid_len)
{
return getValLen(ssid_len);
}

function checkname(szname)
{
var c;
var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$%^&*()-=_+[]{};:\'\"\\|/?.,<>/ ";

for (var i = 0; i < szname.length; i++)
{
c = szname.charAt(i);
if (ch.indexOf(c) == -1)
return false;
}
return true;
}

function checkMptBssid()
{
var cf = document.forms[0];
if(getValLen(cf.mptBssid1.value)==0 && getValLen(cf.mptBssid2.value)==0 && getValLen(cf.mptBssid3.value)==0 && getValLen(cf.mptBssid4.value)==0)
{
alert(str_pages.ntw_wzd_wlan_ap.js_pl_input_bssid);
cf.mptBssid1.focus();
cf.mptBssid1.select();
return false;
}
if(getValLen(cf.mptBssid1.value)>0 && !macverify(cf.mptBssid1.value))
{
cf.mptBssid1.focus();
cf.mptBssid1.select();
return false
}
if(getValLen(cf.mptBssid2.value)>0 && !macverify(cf.mptBssid2.value))
{
cf.mptBssid2.focus();
cf.mptBssid2.select();
return false
}
if(getValLen(cf.mptBssid3.value)>0 && !macverify(cf.mptBssid3.value))
{
cf.mptBssid3.focus();
cf.mptBssid3.select();
return false
}
if(getValLen(cf.mptBssid4.value)>0 && !macverify(cf.mptBssid4.value))
{
cf.mptBssid4.focus();
cf.mptBssid4.select();
return false
}
if (("" != cf.mptBssid1.value) && ((cf.mptBssid1.value.toLowerCase() == cf.mptBssid2.value.toLowerCase()) || (cf.mptBssid1.value.toLowerCase() == cf.mptBssid3.value.toLowerCase()) || (cf.mptBssid1.value.toLowerCase() == cf.mptBssid4.value.toLowerCase())))
{
alert(str_pages.ntw_wzd_wlan_ap.js_two_same_mac);
cf.mptBssid1.focus();
cf.mptBssid1.select();
return false;
}
if (("" != cf.mptBssid2.value) && ((cf.mptBssid2.value.toLowerCase() == cf.mptBssid1.value.toLowerCase()) || (cf.mptBssid2.value.toLowerCase() == cf.mptBssid3.value.toLowerCase()) || (cf.mptBssid2.value.toLowerCase() == cf.mptBssid4.value.toLowerCase())))
{
alert(str_pages.ntw_wzd_wlan_ap.js_two_the_same_mac);
cf.mptBssid2.focus();
cf.mptBssid2.select();
return false;
}
if (("" != cf.mptBssid3.value) && ((cf.mptBssid3.value.toLowerCase() == cf.mptBssid1.value.toLowerCase()) || (cf.mptBssid3.value.toLowerCase() == cf.mptBssid2.value.toLowerCase()) || (cf.mptBssid3.value.toLowerCase() == cf.mptBssid4.value.toLowerCase())))
{
alert(str_pages.ntw_wzd_wlan_ap.js_more_same_mac);
cf.mptBssid3.focus();
cf.mptBssid3.select();
return false;
}
if (("" != cf.mptBssid4.value) && ((cf.mptBssid4.value.toLowerCase() == cf.mptBssid1.value.toLowerCase()) || (cf.mptBssid4.value.toLowerCase() == cf.mptBssid2.value.toLowerCase()) || (cf.mptBssid4.value.toLowerCase() == cf.mptBssid3.value.toLowerCase())))
{
alert(str_pages.ntw_wzd_wlan_ap.js_more_the_same_mac);
cf.mptBssid4.focus();
cf.mptBssid4.select();
return false;
}
return true;
}

function checkWEP()
{
var cf = document.forms[0];
var APLen = getValLen(secInf[3]);
var STALen = getValLen(cf.wds_keytext.value);
if (APLen != STALen)
return false;

for (i=0; i<APLen; i++)
{
if (secInf[3].charAt(i) != cf.wds_keytext.value.charAt(i))
return false;
} 
return true;
}

function doSubmit()
{
var cf = document.forms[0];
var ressid;
var ssid_value;
//?Â¨?2Â¨|SSID
switch(wzdWlanInf[39])
{
case 0:
case 6:
case 7:
ssid_value = cf.ssid_ap.value;
break;
case 1:
ssid_value = cf.ssid1.value;
break;
case 3:
ssid_value = cf.ssid_client.value;
break;
case 4:
case 5:
ssid_value = cf.rptSsid.value;
break;
}
ressid = checkssid(ssid_value);
if(0 == ressid)
{
alert(document.getElementById("t_ssid_input_any").innerHTML + (wzdWlanInf[39]==1?"1":"") + "!");
return false;
}
if(ressid > 32)
{
alert(str_pages.ntw_wzd_wlan_ap.js_ssid_exe);
return false;
}

if (!checkname(cf.ssid_ap.value))
{
alert(str_pages.ntw_wzd_wlan_ap.js_ssid_ill);	
return false;
}

if(wzdWlanInf[39] == 1)//multi
{
if(getValLen(cf.ssid2.value) > 32 || getValLen(cf.ssid3.value) > 32 || getValLen(cf.ssid4.value) > 32)
{
alert(str_pages.ntw_wzd_wlan_ap.js_ssid_exe);
return false;
}

if (cf.chk_ssid2.checked == true && getValLen(cf.ssid2.value) == 0)
{
alert(document.getElementById("t_ssid_input_any").innerHTML + "2!");
return false;
}

if (cf.chk_ssid3.checked == true && getValLen(cf.ssid3.value) == 0)
{
alert(document.getElementById("t_ssid_input_any").innerHTML +"3!");
return false;
}

if (cf.chk_ssid4.checked == true && getValLen(cf.ssid4.value) == 0)
{
alert(document.getElementById("t_ssid_input_any").innerHTML + "4!");
return false;
}

if (cf.vlanEnable[1].checked)
{
if(is_digit(cf.vlanId1.value) == false)
{
cf.vlanId1.focus();
cf.vlanId1.select();
return false;
}

if ((cf.vlanId1.value < 1 || cf.vlanId1.value > 4095) && (cf.vlanId1.value != "" || cf.ssid1.value != ""))
{
alert(str_pages.ntw_wzd_wlan_ap.js_vlanId);
cf.vlanId1.focus();
cf.vlanId1.select();
return false;
}

if(is_digit(cf.vlanId2.value) == false)
{
cf.vlanId2.focus();
cf.vlanId2.select();
return false;
}

if ((cf.vlanId2.value < 1 || cf.vlanId2.value > 4095) && (cf.vlanId2.value != "" || cf.ssid2.value != ""))
{
alert(str_pages.ntw_wzd_wlan_ap.js_vlanId);
cf.vlanId2.focus();
cf.vlanId2.select();
return false;
}

if(is_digit(cf.vlanId3.value) == false)
{
cf.vlanId3.focus();
cf.vlanId3.select();
return false;
}

if ((cf.vlanId3.value < 1 || cf.vlanId3.value > 4095) && (cf.vlanId3.value != "" || cf.ssid3.value != ""))
{
alert(str_pages.ntw_wzd_wlan_ap.js_vlanId);
cf.vlanId3.focus();
cf.vlanId3.select();
return false;
}

if(is_digit(cf.vlanId4.value) == false)
{
cf.vlanId4.focus();
cf.vlanId4.select();
return false;
}

if ((cf.vlanId4.value < 1 || cf.vlanId4.value > 4095) && (cf.vlanId4.value != "" || cf.ssid4.value != ""))
{
alert(str_pages.ntw_wzd_wlan_ap.js_vlanId);
cf.vlanId4.focus();
cf.vlanId4.select();
return false;
}
}
}

if(wzdWlanInf[39] == 3)//client
{
if(0 == getValLen(cf.ssid_client.value))
{
alert(document.getElementById("t_ssid_input_any").innerHTML + (wzdWlanInf[39]==1?"1":"") + "!");
return false;
}
else if(getValLen(cf.ssid_client.value) > 32)
{
alert(str_pages.ntw_wzd_wlan_ap.js_ssid_exe);
return false;
}
if (!checkname(cf.ssid_client.value))
{
alert(str_pages.ntw_wzd_wlan_ap.js_ssid_ill);	
return false;
}
if(!is_macaddr(cf.mac_client.value))
{
cf.mac_client.focus();
cf.mac_client.select();
return false;
}
}

if(wzdWlanInf[39] == 4 || wzdWlanInf[39] == 5)//Repeater
{
if (!checkname(cf.rptSsid.value))
{
alert(str_pages.ntw_wzd_wlan_ap.js_ssid_ill);	
return false;
}
if(!is_macaddr(cf.rptBssid.value))
{
cf.rptBssid.focus();
cf.rptBssid.select();
return false;
}
}

if(wzdWlanInf[39] == 6)//WDS Bridge
{	
if(getValLen(cf.brlssid.value) > 32)
{
alert(str_pages.ntw_wzd_wlan_ap.js_ssid_exe);
doSelKeytype();
cf.brlssid.focus();
cf.brlssid.select();
return false;
}
else if(0 == getValLen(cf.brlssid.value))
{
alert(str_pages.ntw_wzd_wlan_ap.js_pl_ssid);
doSelKeytype();			
return false;
}

if (!checkname(cf.brlssid.value))
{	
alert(str_pages.ntw_wzd_wlan_ap.js_ssid_ill);
cf.brlssid.focus();
cf.brlssid.select();	
return false;
}

if(!is_macaddr(cf.brlbssid.value))
{
doSelKeytype();
cf.brlbssid.focus();
cf.brlbssid.select();
return false;
}

if(cf.wds_keytype.value == 2)
{
if(cf.wds_keyformat.value == 2)	//asii
{
if( getValLen(cf.wds_keytext.value) != 5 && getValLen(cf.wds_keytext.value) != 13 && getValLen(cf.wds_keytext.value) !=16 )
{
alert(str_pages.ntw_wzd_wlan_ap.js_key_corret);
doSelKeytype();			
return false;
}
if (checkwepasiikey(cf.wds_keytext.value) == false)
{
alert(str_pages.ntw_wzd_wlan_ap.js_wepkey_corret);
doSelKeytype();
return false;
}	
}
else if(cf.wds_keyformat.value == 3) //hex
{
if( getValLen(cf.wds_keytext.value) != 10 && getValLen(cf.wds_keytext.value) != 26 && getValLen(cf.wds_keytext.value) !=32 )
{
alert(str_pages.ntw_wzd_wlan_ap.js_key_corret);
doSelKeytype();
return false;
}
if (checkwephexkey(cf.wds_keytext.value) == false)
{
alert(str_pages.ntw_wzd_wlan_ap.js_wepkey_corret);
doSelKeytype();
return false;
}
}
}
else if (cf.wds_keytype.value == 4)
{
if (doCheckPskPasswd() == false)
{
doSelKeytype();
return false;
}
}

if (wzdWlanInf[13]==1 && wzdWlanInf[14] == 1)	//local wireless use wep
{
if(secInf[2] > 1 && cf.wds_keytype.value == 4)
{
alert(str_pages.ntw_wzd_wlan_ap.js_security_not_set)
doSelKeytype();		
return false;
}

if (secInf[2] == cf.wds_wepindex.value && cf.wds_keytype.value == 2)
{
if ((cf.wds_keyformat.value == 2 && secInf[1] == 2)	//asii
|| (cf.wds_keyformat.value == 3 && secInf[1] == 1))	//hex
{
if (checkWEP() == false)
{
var bChange = window.confirm(document.getElementById("t_same_wep_index").innerHTML);
if(!bChange)
{
return false;
}
}
}
}
}
}

if(wzdWlanInf[39] == 7)//Bridge
{
if(!checkMptBssid())
return false;
}

if(cf.channel.value == 15)
{
if(wzdWlanInf[39] == 7 || wzdWlanInf[39] == 6)
{
alert(str_pages.ntw_wzd_wlan_ap.js_auto_channel);
return false;
}
}

if(wzdSurvey[34] == 1)
{
if(wzdWlanInf[39] == 6)	//bridge(wds)
{
if(cf.wds_keytype.value != wzdSurvey[33])
{
if(wzdSurvey[33] == 1)
{
alert(str_pages.ntw_wzd_wlan_ap.js_remote_security_none);
return false;
}	
else if(wzdSurvey[33] == 2)
{
alert(str_pages.ntw_wzd_wlan_ap.js_remote_security_wep);
return false;
}
else
{
alert(str_pages.ntw_wzd_wlan_ap.js_remote_security_wpa_psk);
return false;
}
}
}
else 	//client, rpt and mpt
{
if(cf.secType.value != wzdSurvey[33])
{
if(wzdSurvey[33] == 0)
{
alert(str_pages.ntw_wzd_wlan_ap.js_remote_security_none);
return false;
}	
else if(wzdSurvey[33] == 1)
{
alert(str_pages.ntw_wzd_wlan_ap.js_remote_security_wep);
return false;
}
else if(wzdSurvey[33] == 6 && cf.secType.value == 3)
{
}
else
{
alert(str_pages.ntw_wzd_wlan_ap.js_remote_security_wpa_psk);
return false;
}
}
}
}

if (cf.secType.value == 3)
{
var len = getValLen(cf.pskSecret.value);
if (len <= 0)
{
alert(str_pages.ntw_wzd_wlan_ap.js_empty_psk_password);
cf.pskSecret.focus();
return false;
}
if ((len > 0) && (len < 8))
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_char);
cf.pskSecret.focus();
cf.pskSecret.select();
return false;
}
else if(len < 64)
{
var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";
var c;
for(i = 0; i < len; i++)
{
c = cf.pskSecret.value.charAt(i);
if(ch.indexOf(c) == -1)
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_hex);
cf.pskSecret.focus();
cf.pskSecret.select();
return false;
}
}
}
else 
{
var ch = "0123456789ABCDEFabcdef";
var c;
for(i = 0; i < len; i++)
{
c = cf.pskSecret.value.charAt(i);
if(ch.indexOf(c) == -1)
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_hex);
cf.pskSecret.focus();
cf.pskSecret.select();
return false;
}
}
}
if ((0 != cf.interval.value) && (cf.interval.value < 30))
{
if ("" != cf.interval.value)
{
alert(str_pages.ntw_wzd_wlan_ap.js_inv_group_per);
return false;
}
}
}
else if(cf.secType.value == 1)
{
var renum;
renum = checkWEP_sta();
if (0 == renum)
{
alert("The WEP key is empty, please input WEP key.");
return false;
}
if (renum < 5 && renum >0)
{
if (is_Hex == true)
{
alert (str_pages.ntw_wzd_wlan_ap.js_wep_key_inv_hex);
}
else
{
alert (str_pages.ntw_wzd_wlan_ap.js_wep_key_inv_asc);
}

if (renum == 1 &&cf.key1.disabled == false)				{	cf.key1.focus();	cf.key1.select();	}
else if (renum == 2 &&cf.key2.disabled == false)		{	cf.key2.focus();	cf.key2.select();	}
else if (renum == 3 &&cf.key3.disabled == false)		{	cf.key3.focus();	cf.key3.select();	}
else if (renum == 4 &&cf.key4.disabled == false)		{	cf.key4.focus();	cf.key4.select();	}
return false;
}

}
return true;
}
function changeRegion()
{
var cf = document.forms[0];
var oldChannel = cf.channel.value;

cf.channel.options.length = 0;
var channelIndex;
if (wzdWlanInf[9] == 1)
channelIndex = document.forms[0].region.value;
else
channelIndex = wzdWlanInf[4];
channelIndex = (channelIndex)*4;
var j=0;
var autooptObj = new Option("Auto",15,false,false);
cf.channel.options[j++] = autooptObj;
var oldRegion = regionInfo[channelIndex];
while(oldRegion == regionInfo[channelIndex])
{	
for (var i=regionInfo[channelIndex+1]; i<=regionInfo[channelIndex+2]; i++)
{
if (i == 14)
{
if (!document.forms[0].mode.value)
{
if (2 == wzdWlanInf[6]  || 3 == wzdWlanInf[6])
continue;
}

if ((2 == document.forms[0].mode.value) || (3 == document.forms[0].mode.value))
continue;
}	

var optionObj = new Option(i,i,false,false);
cf.channel.options[j++]=optionObj;
if (i == oldChannel)
cf.channel.value =i;
}
channelIndex =channelIndex+4;
}
}

function onVlanEnable(value)
{
if( value == 2)
{
document.forms[0].vlanId1.disabled = false;
if(document.forms[0].chk_ssid2.checked == true)
document.forms[0].vlanId2.disabled = false;
if(document.forms[0].chk_ssid3.checked == true)
document.forms[0].vlanId3.disabled = false;
if(document.forms[0].chk_ssid4.checked == true)
document.forms[0].vlanId4.disabled = false;
}
else
{
document.forms[0].vlanId1.disabled = true;
document.forms[0].vlanId2.disabled = true;
document.forms[0].vlanId3.disabled = true;
document.forms[0].vlanId4.disabled = true;
}
}

function changeSecurity()
{
var i = 0, j = 0;
var sec_mode = document.forms[0].secType.value;
var cf = document.forms[0];
switch(wzdWlanInf[39])
{
case 0: j = 1;	break;
case 1: j = 2;	break;
case 3: j = 3;	break;
case 4: j = 4;	break;
case 6:	j = 5;	break;
case 7: j = 6;	break;
}
while( t_sec_zujian[7 * i] != 1 )
{
if( ( sec_mode != t_sec_zujian[7 * i + j]) && (t_sec_zujian[7 * i + j] != 5) )
{
document.getElementById(t_sec_zujian[7 * i]).style.display = "none";
}
else
{
document.getElementById(t_sec_zujian[7 * i]).style.display = "";
}	
i++;
}
}
function doSave()
{
var cf = document.forms[0];
var ssid = cf.multi_sec.value;
pwd = doCheckPwd();

if(cf.secType.value == 3 && pwd == 0)
{
return false;
}

if( ssid == 0 )
{
cf.ssid_type1.value = cf.secType.value;
if(pwd != "")
cf.ssid_sec1.value = pwd;
alert(str_pages.ntw_wzd_wlan_ap.js_security_ssid1);
}
else if(ssid == 1)
{
cf.ssid_type2.value = cf.secType.value;
if(pwd != "")
cf.ssid_sec2.value = pwd;
alert(str_pages.ntw_wzd_wlan_ap.js_security_ssid2);
}
else if(ssid == 2)
{
cf.ssid_type3.value = cf.secType.value;
if(pwd != "")
cf.ssid_sec3.value = pwd;
alert(str_pages.ntw_wzd_wlan_ap.js_security_ssid3);
}
else if(ssid == 3)
{
cf.ssid_type4.value = cf.secType.value;
if(pwd != "")
cf.ssid_sec4.value = pwd;
alert(str_pages.ntw_wzd_wlan_ap.js_security_ssid4);
}
else
{
return false;
}

return true;
}
function doCheckPwd()
{
var cf = document.forms[0];
len = getValLen(cf.pskSecret.value);
if( cf.secType.value == 0 || cf.secType.value == 4 )
{
return "";
}
else if(cf.secType.value == 3)
{
if  (len <= 0)
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_empty);
return "";
}
else if ((len > 0) && (len < 8))
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_char);
return "";
}
else if(len <= 64)
{
var ch="0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";
var c;
for(i = 0; i < len; i++)
{
c = cf.pskSecret.value.charAt(i);
if(ch.indexOf(c) == -1)
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_hex);
return "";
}
}
return cf.pskSecret.value;
}
else
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_hex);
return "";
}
}
return "";
}

function checkkey_ap(szname)
{
var c;
var zeronum = 0;
var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";

if(document.forms[0].secType.value == 1 && secInf[1] == 1)//HEX
{
if(szname.length != 10 && szname.length != 26 && szname.length != 32)
{
alert(str_pages.ntw_wzd_wlan_ap.js_wep_key_inv_hex);
return false;
}
}
else if(document.forms[0].secType.value == 1 && secInf[1] == 2)//ASII
{
if(szname.length != 5 && szname.length != 13 && szname.length != 16)
{
alert(str_pages.ntw_wzd_wlan_ap.js_wep_key_inv_asc);
return false;
}
}

if	(wzdWlanInf[14] == 1 && secInf[1] == 1)
{
ch = ch.substring(0,22);
}
for (var i = 0; i < szname.length; i++)
{
c = szname.charAt(i);
if (c =="0")
zeronum ++;
if (ch.indexOf(c) == -1)
{
if(secInf[1] == 1)
alert(str_pages.ntw_wzd_wlan_ap.js_wep_key_inv_hex);
else if(secInf[1] == 2)
alert(str_pages.ntw_wzd_wlan_ap.js_wep_key_inv_asc);
return false;
}	
if (zeronum == szname.length && document.forms[0].secType.value == 1 && secInf[1] == 1)
{
alert(str_pages.ntw_wzd_wlan_ap.js_wep_key_inv_hex);
return false;
}
}
return true;
}
function checkWEP_sta()
{
var cf = document.forms[0];
if (key1dis && key2dis && key3dis && key4dis)
return 0;
if (key1dis == 0 &&!(cf.key1.value=="" && !cf.secType[1].checked))	{if (checkkey(cf.key1.value,keylength1) == false)	return 1;}
if (key2dis == 0 &&!(cf.key2.value=="" && !cf.secType[1].checked))	{if (checkkey(cf.key2.value,keylength2) == false)	return 2;}
if (key3dis == 0 &&!(cf.key3.value=="" && !cf.secType[1].checked))	{if (checkkey(cf.key3.value,keylength3) == false)	return 3;}
if (key4dis == 0 &&!(cf.key4.value=="" && !cf.secType[1].checked))	{if (checkkey(cf.key4.value,keylength4) == false)	return 4;}
return 5;
}
function checkkey(szname,strlength)
{
var c;
var zeronum = 0;
var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";
if (szname.length != strlength)
return false;
if	(is_Hex == 1)
ch = ch.substring(0,22);
for (var i = 0; i < szname.length; i++)
{
c = szname.charAt(i);
if (c =="0")
zeronum ++;
if (ch.indexOf(c) == -1)
return false;
if (zeronum == strlength && is_Hex == 1)
return false;
}
return true;
}

function randomsec()
{
var i = 0;
var length = 0;
var ch = "ABC0123456789ABCDEFDEF";
var txt = "";
while(i<randomlength)
{
length = Math.round(16 * Math.random());
txt += ch.charAt(length+3);
i = txt.length;
}

if( document.forms[0].secType.value == 1 )
{
document.forms[0].wepSecret.value = txt;
}
else if( document.forms[0].secType.value == 3 )
{
document.forms[0].pskSecret.value = txt;
}
changeSecurity();
}

function setKey()
{
getdisable();
auto_disable();
auto_length();
}
function getdisable()
{
var cf = document.forms[0];
key1dis = (cf.length1.selectedIndex == 0);
key2dis = (cf.length2.selectedIndex == 0);
key3dis = (cf.length3.selectedIndex == 0);
key4dis = (cf.length4.selectedIndex == 0);
}
function auto_disable()
{
var cf = document.forms[0];
var keychoosed;
cf.key1.readonly = cf.keynum[0].disabled = key1dis;
cf.key2.readonly = cf.keynum[1].disabled = key2dis;
cf.key3.readonly = cf.keynum[2].disabled = key3dis;
cf.key4.readonly = cf.keynum[3].disabled = key4dis;
for (i = 0; i < cf.keynum.length; i ++)
{
if (cf.keynum[i].checked)
{
keychoosed = cf.keynum[i].value;
break;
}
}
if ((0 == key1dis) || (0 == key2dis) || (0 == key3dis) || (0 == key4dis))
{
if ((keychoosed == 1 && cf.length1.selectedIndex == 0) ||
(keychoosed == 2 && cf.length2.selectedIndex == 0) ||
(keychoosed == 3 && cf.length3.selectedIndex == 0) ||
(keychoosed == 4 && cf.length4.selectedIndex == 0))
{
if (0 == key1dis)
cf.keynum[0].checked = 1;
else if (0 == key2dis)
cf.keynum[1].checked = 1;
else if (0 == key3dis)
cf.keynum[2].checked = 1;
else
cf.keynum[3].checked = 1;
}
}
}
function auto_length()
{
var cf = document.forms[0];

keylength1 =(1 == key1dis) ? keylength1 :(((3 == cf.length1.selectedIndex) ? 16 : ((2 == cf.length1.selectedIndex) ? 13 : 5)) *((0 == cf.keytype.selectedIndex) ? 2 : 1));
keylength2 =(1 == key2dis) ? keylength2 :(((3 == cf.length2.selectedIndex) ? 16 : ((2 == cf.length2.selectedIndex) ? 13 : 5)) *((0 == cf.keytype.selectedIndex) ? 2 : 1));
keylength3 =(1 == key3dis) ? keylength3 :(((3 == cf.length3.selectedIndex) ? 16 : ((2 == cf.length3.selectedIndex) ? 13 : 5)) *((0 == cf.keytype.selectedIndex) ? 2 : 1));
keylength4 =(1 == key4dis) ? keylength4 :(((3 == cf.length4.selectedIndex) ? 16 : ((2 == cf.length4.selectedIndex) ? 13 : 5)) *((0 == cf.keytype.selectedIndex) ? 2 : 1));

if ((cf.key1.value.length > keylength1) && (key1dis != 1))cf.key1.value = cf.key1.value.substring(0,keylength1);
if ((cf.key2.value.length > keylength2) && (key2dis != 1))cf.key2.value = cf.key2.value.substring(0,keylength2);
if ((cf.key3.value.length > keylength3) && (key3dis != 1))cf.key3.value = cf.key3.value.substring(0,keylength3);
if ((cf.key4.value.length > keylength4) && (key4dis != 1))cf.key4.value = cf.key4.value.substring(0,keylength4);

cf.key1.maxLength =  keylength1;
cf.key2.maxLength =  keylength2;
cf.key3.maxLength =  keylength3;
cf.key4.maxLength =  keylength4;

if (cf.keytype.selectedIndex == 0)
is_Hex = true;
else
is_Hex = false;
}
function changeSecforSsid()
{
var cf = document.forms[0];	
cf.pskSecret.value = "";
switch(cf.multi_sec.value)
{
case "0":
cf.secType.value = cf.ssid_type1.value;	
cf.pskSecret.value = cf.ssid_sec1.value;
break;
case "1":
cf.secType.value = cf.ssid_type2.value;	
cf.pskSecret.value = cf.ssid_sec2.value;
break;
case "2":
cf.secType.value = cf.ssid_type3.value;	
cf.pskSecret.value = cf.ssid_sec3.value;
break;
case "3":
cf.secType.value = cf.ssid_type4.value;	
cf.pskSecret.value = cf.ssid_sec4.value;
break;
default:
cf.secType.value = cf.ssid_type1.value;	
cf.pskSecret.value = cf.ssid_sec1.value;
break;
}
}

function doAddSsid(num)
{
var cf = document.forms[0];
if(2 == num)
{
if(cf.chk_ssid2.checked == true)
{
cf.chk_ssid3.disabled = false;
cf.ssid2.disabled = false;
cf.ssid2.title = "";

if(cf.vlanEnable[0].checked == true)
{
cf.vlanId2.disabled = true;
}
else
{
cf.vlanId2.disabled = false;
}
doChangeSsid(num);
}
else
{
cf.chk_ssid3.disabled = true;
cf.chk_ssid4.disabled = true;
cf.ssid2.disabled = true;
cf.ssid3.disabled = true;
cf.ssid4.disabled = true;
cf.chk_ssid3.checked = false;
cf.chk_ssid4.checked = false;
cf.ssid2.title = document.getElementById("t_check_button").innerHTML;
cf.vlanId2.disabled = true;
cf.vlanId3.disabled = true;
cf.vlanId4.disabled = true;
doChangeSsid(num - 1);
}
}
if(3 == num)
{
if(cf.chk_ssid3.checked == true)
{
cf.chk_ssid4.disabled = false;
cf.ssid3.disabled = false;
cf.ssid3.title = "";
if(cf.vlanEnable[0].checked == true)
{
cf.vlanId3.disabled = true;
}
else
{
cf.vlanId3.disabled = false;
}
doChangeSsid(num);
}
else
{	
cf.chk_ssid4.disabled = true;
cf.ssid3.disabled = true;
cf.ssid4.disabled = true;
cf.chk_ssid4.checked = false;
cf.ssid3.title = document.getElementById("t_check_button").innerHTML;
cf.vlanId3.disabled = true;
cf.vlanId4.disabled = true;
doChangeSsid(num - 1);
}
}
if(4 == num)
{
if(cf.chk_ssid4.checked == true)
{
cf.ssid4.disabled = false;
cf.ssid4.title = "";
if(cf.vlanEnable[0].checked == true)
{
cf.vlanId4.disabled = true;
}
else
{
cf.vlanId4.disabled = false;
}
doChangeSsid(num);
}
else
{
cf.ssid4.disabled = true;
cf.ssid4.title = document.getElementById("t_check_button").innerHTML;
cf.vlanId4.disabled = true;
doChangeSsid(num - 1);
}
}
}
function doBack()
{
if (window.parent == window)
{
window.close();
}
else
{
parent.bottomLeftFrame.collapseAll();
parent.mainFrame.location.href = "../userRpm/WzdWlanApRpm.htm?Return=Return";
}
}

var regionInfo = new Array(
"Albania", 1, 13, 2,
"Algeria", 1, 13, 2,
"Argentina", 1, 13, 2,
"Armenia", 1, 13, 2,
"Australia", 1, 13, 2,
"Austria", 1, 13, 2,
"Azerbaijan", 1, 13, 2,
"Bahrain", 1, 13, 2,
"Belarus", 1, 13, 2,
"Belgium", 1, 13, 2,
"Belize", 1, 13, 2,
"Bolivia", 1, 13, 2,
"Brazil", 1, 13, 2,
"Brunei Darussalam", 1, 13, 2,
"Bulgaria", 1, 13, 2,
"Canada", 1, 11, 2,
"Chile", 1, 13, 2,
"China", 1, 13, 1,
"Colombia", 1, 11, 2,
"Costa Rica", 1, 13, 2,
"Croatia", 1, 13, 2,
"Cyprus", 1, 13, 2,
"Czech Republic", 1, 13, 2,
"Denmark", 1, 13, 2,
"Dominican Republic", 1, 11, 2,
"Ecuador", 1, 13, 2,
"Egypt", 1, 13, 2,
"El Salvador", 1, 13, 2,
"Estonia", 1, 13, 2,
"Finland", 1, 13, 2,
"France", 1, 13, 2,
"Georgia", 1, 13, 2,
"Germany", 1, 13, 2,
"Greece", 1, 13, 2,
"Guatemala", 1, 11, 2,
"Honduras", 1, 13, 2,
"Hong Kong", 1, 13, 2,
"Hungary", 1, 13, 2,
"Iceland", 1, 13, 2,
"India", 1, 13, 2,
"Indonesia", 1, 13, 2,
"Iran", 1, 13, 2,
"Ireland", 1, 13, 2,
"Israel", 1, 13, 2,
"Italy", 1, 13, 2,
"Japan", 1, 14, 2,
"Japan1", 1, 14, 2,
"Japan2", 1, 11, 2,
"Japan3", 1, 14, 2,
"Japan4", 1, 14, 2,
"Japan5", 1, 14, 2,
"Japan6", 1, 13, 2,
"Jordan", 1, 13, 2,
"Kazakhstan", 1, 13, 2,
"North Korea", 1, 13, 2,
"Korea Republic", 1, 13, 2,
//"Korea Republic2", -19, -7, 2,
"Korea Republic3", 1, 13, 2,
"Kuwait", 1, 13, 2,
"Latvia", 1, 13, 2,
"Lebanon", 1, 13, 2,
"Liechtenstein", 1, 13, 2,
"Lithuania", 1, 13, 2,
"Luxembourg", 1, 13, 2,
"Macau", 1, 13, 2,
"Macedonia", 1, 13, 2,
"Malaysia", 1, 13, 2,
"Malta", 1, 13, 2,
"Mexico", 1, 11, 2,
"Monaco", 1, 13, 2,
"Morocco", 1, 13, 2,
"Netherlands", 1, 13, 2,
"New Zealand", 1, 13, 2,
"Norway", 1, 13, 2,
"Oman", 1, 13, 2,
"Pakistan", 1, 13, 2,
"Panama", 1, 11, 2,
"Peru", 1, 13, 2,
"Philippines", 1, 13, 2,
"Poland", 1, 13, 2,
"Portugal", 1, 13, 2,
"Puerto Rico", 1, 11, 2,
"Qatar", 1, 13, 2,
"Romania", 1, 13, 2,
"Russia", 1, 13, 2,
"Saudi Arabia", 1, 13, 2,
"Singapore", 1, 13, 2,
"Slovak Republic", 1, 13, 2,
"Slovenia", 1, 13, 2,
"South Africa", 1, 13, 2,
"Spain", 1, 13, 2,
"Sweden", 1, 13, 2,
"Switzerland", 1, 13, 2,
"Syria", 1, 13, 2,
"Taiwan", 1, 11, 2,
"Thailand", 1, 13, 2,
"Trinidad & Tobago", 1, 13, 2,
"Tunisia", 1, 13, 2,
"Turkey", 1, 13, 2,
"Ukraine", 1, 13, 2,
"United Arab Emirates", 1, 13, 2,
"United Kingdom", 1, 13, 2,
"United States", 1, 11, 2,
"Uruguay", 1, 13, 2,
"Uzbekistan", 1, 11, 2,
"Venezuela", 1, 13, 2,
"Viet Nam", 1, 13, 2,
"Yemen", 1, 13, 2,
"Zimbabwe", 1, 13, 2
); 

function doChangeSsid(num)
{
var cf = document.forms[0];

var optNum;
var index;
while((optNum = cf.multi_sec.options.length) > 0)
{
cf.multi_sec.remove(0);
}

if(cf.chk_ssid4.checked)
num = 4;
else if(cf.chk_ssid3.checked)
num = 3;
else if(cf.chk_ssid2.checked)
num = 2;
else
num = 1;

var ssidArray = new Array(4);
ssidArray[0] = cf.ssid1.value;
ssidArray[1] = cf.ssid2.value;
ssidArray[2] = cf.ssid3.value;
ssidArray[3] = cf.ssid4.value;
for(optNum = 0, index = 0; optNum < num; optNum++)
{
cf.multi_sec.options[index++] = new Option(ssidArray[optNum],optNum,false,false);
cf.multi_sec.value = optNum;
changeSecforSsid();
}
}

function doDnySetRegion()
{
var tmp_region_index = document.forms[0].region.value;
var tmp_mode = document.forms[0].mode.value;
var tmp_channel = document.forms[0].channel.value;
location.href="../userRpm/WzdWlanApRpm.htm?&tmp_region_index="+tmp_region_index+"&tmp_mode="+tmp_mode+"&tmp_channel="+tmp_channel;
}

function doSelKeytype()
{
var cf = document.forms[0];
if (cf.wds_keytype.value == 2)
{
document.getElementById("t_wds_auth_type").style.display = "";
document.getElementById("t_wds_key_format").style.display = "";
document.getElementById("t_wds_wep_index").style.display = "";
document.getElementById("t_wds_password").style.display = "";	
cf.wds_keytext.maxLength = (cf.wds_keyformat.value == 2)? 16:32;
}
else if(cf.wds_keytype.value == 4)
{
document.getElementById("t_wds_auth_type").style.display = "none";
document.getElementById("t_wds_key_format").style.display = "none";
document.getElementById("t_wds_wep_index").style.display = "none";
document.getElementById("t_wds_password").style.display = "";
cf.wds_keytext.maxLength = 64;
}
else
{
document.getElementById("t_wds_auth_type").style.display = "none";
document.getElementById("t_wds_key_format").style.display = "none";
document.getElementById("t_wds_wep_index").style.display = "none";
document.getElementById("t_wds_password").style.display = "none";		
}
return true;
}

function checkwephexkey(szkey)
{
var c;
var ch = "0123456789ABCDEFabcdef";

for (var i = 0; i < szkey.length; i++)
{
c = szkey.charAt(i);
if (ch.indexOf(c) == -1)
return false;
}
return true;
}

function checkwepasiikey(szkey)
{
var c;
var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";

for (var i = 0; i < szkey.length; i++)
{
c = szkey.charAt(i);
if (ch.indexOf(c) == -1)
return false;
}
return true;
}

function doCheckPskPasswd()
{
var cf = document.forms[0];
len = getValLen(cf.wds_keytext.value);
if  (len <= 0)
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_empty);
return false;
}
else if ((len > 0) && (len < 8))
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_char);
return false;
}
else if(len < 64)
{
var ch = "0123456789ABCDEFabcdefGHIJKLMNOPQRSTUVWXYZghijklmnopqrstuvwxyz`~!@#$^&*()-=_+[]{};:\'\"\\|/?.,<>/% ";
var c;
for(i = 0; i < len; i++)
{
c = cf.wds_keytext.value.charAt(i);
if(ch.indexOf(c) == -1)
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_hex);
return false;
}
}
}
else 
{
var ch = "0123456789ABCDEFabcdef";
var c;
for(i = 0; i < len; i++)
{
c = cf.wds_keytext.value.charAt(i);
if(ch.indexOf(c) == -1)
{
alert(str_pages.ntw_wzd_wlan_ap.js_psk_hex);
return false;
}
}
}
return true;
}

function ExtSSIDstyle(ssidtype)
{
var cf = document.forms[0]; //document.forms[0]
var rootapssid = document.getElementById("rptSsid").value;
var len = getValLen(rootapssid);
if(ssidtype != 1)
{	
document.getElementById("extssidname").value=rootapssid;
document.getElementById("extssidname2").disabled=true;
cf.copyFromRootAp.value = 0;
}else
{	
len = len+4;
if( len > 32 )
{
var subrootapssid = rootapssid.substr(0,28);
rootapssid = subrootapssid;
}
document.getElementById("extssidname2").disabled=false;
document.getElementById("extssidname2").value=rootapssid+"_ext";
cf.copyFromRootAp.value = 1;
}
}
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="setTagStr(document,'ntw_wzd_wlan_ap');LoadHelp('WzdWlanApHelpRpm.htm'); resize(this);"  onresize="resize(this);">
<FORM  name="wzdwlancfg" action="WzdWlanApRpm.htm" enctype="multipart/form-data" method="get" onSubmit="return doSubmit();">
<TABLE id="autoWidth">
<TBODY>
<!--
<TR id="t_progressbar">
<TD><TABLE><TR>	
<SCRIPT type="text/javascript">
if(wzdWlanInf[45] == 1)//multiSysMode)
{
document.write('<TD class="h4" id="t_title">Working Mode</TD>');
}
</SCRIPT>
<TD class="h4" id="t_title">Operation Mode</TD>
<TD class="h5" id="t_title">Wireless Setting</TD>
<TD class="h4" id="t_title">Network Setting</TD>
<TD class="h4" id="t_title">Finish</TD>
</TR></TABLE></TD>	
</TR>
-->
<TR>
<TD class=h1 colspan=2 id="t_title">Wireless Setting</TD>
</TR>
<TR>
<TD class=blue colspan=2></TD>
</TR>

<TR><TABLE>
<!--
<TR>
<TABLE>
<TR>
<SCRIPT type="text/javascript">
switch(wzdWlanInf[39])
{
case 0:
document.write('<TD class=h6 id=\"t_oper_mode\" style=\"FONT-SIZE:15px; FONT-WEIGHT:bold;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AP Mode Setting:<\/TD>');
break;
case 1:
document.write('<TD class=h6 id=\"t_oper_mode\" style=\"FONT-SIZE:15px; FONT-WEIGHT:bold;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Multi-SSID Mode Setting:<\/TD>');
break;
case 3:
document.write('<TD class=h6 id=\"t_oper_mode\" style=\"FONT-SIZE:15px; FONT-WEIGHT:bold;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Client Mode Setting:<\/TD>');
break;
case 4:
document.write('<TD class=h6 id=\"t_oper_mode\" style=\"FONT-SIZE:15px; FONT-WEIGHT:bold;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Repeater Mode Setting:<\/TD>');
break;
case 6:
document.write('<TD class=h6 id=\"t_oper_mode\" style=\"FONT-SIZE:15px; FONT-WEIGHT:bold;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wireless Bridge Setting:<\/TD>');
break;
case 7:
document.write('<TD class=h6 id=\"t_oper_mode\" style=\"FONT-SIZE:15px; FONT-WEIGHT:bold;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bridge with AP Mode Setting:<\/TD>');
break;
default:
document.write('<TD class=h6 id=\"t_oper_mode\" style=\"FONT-SIZE:15px; FONT-WEIGHT:bold;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Setting:<\/TD>');
break;
}
</SCRIPT>
</TR>
</TABLE>
</TR>
-->
<TR>
<TABLE id="autoWidth">

<TR>
<TD>&nbsp;</TD>
</TR>

<TR id="t_wds_ssid">
<TD class="Item" id="t_brlssid" style="padding-left:30px">Wireless Name of Remote AP:</TD>
<TD><INPUT class="text" id="brlssid" name="brlssid" maxlength=32 size=32></TD>
</TR>

<TR id="t_wds_bssid">
<TD class="Item" id="t_brlssid" style="padding-left:30px">MAC Address of Remote AP:</TD>
<TD><INPUT class="text" id="brlbssid" name="brlbssid" maxlength=17 size=17></TD>
</TR>

<TR id="t_wds_survey">
<TD class="Item"style="padding-left:30px" disabled></TD>
<TD><INPUT name="survey_c" id="survey" type="button" class="button" value="Survey" onClick="doSurvey();"></TD>
</TR>

<TR id="t_wds_surcey_note">
<TD class="Item"style="padding-left:30px" disabled></TD>
<TD id="t_wds_surcey_note_1" style="color:gray;" disabled><span id="t_wds_surcey_note1">You can click the Survey button to scan the network SSIDs, </span><br/><span id="t_wds_surcey_note2">and then choose the target one to setup the connection.<span></TD>
</TR>

<TR id="t_wds_sec_selected" style="display:none">
<TD class="Item"style="padding-left:30px" disabled></TD>
<TD style="color:#C11C66" name="t_wds_sec_selected_1">The Security Mode of Remote AP is selected.</TD>
</TR>

<TR id="t_wds_sec_note1" style="display:none">
<TD class="Item"style="padding-left:30px" disabled></TD>
<TD style="color:#C11C66" name="t_wds_sec_note1_1" >The Security Mode of Remote AP is WEP. Please selected Auth type, 
<br/><span name="t_wds_sec_note1_2"> meanwhile choose Key Format and WEP index.</span></TD>
</TR>

<TR id="t_wds_sec_mode">
<TD class="Item" id="t_keytype" style="padding-left:30px">Wireless Security Mode:</TD>
<TD><SELECT name="wds_keytype" style = "width:210px" onChange="doSelKeytype()">
<OPTION value=1 id="t_none">No Security</OPTION>
<OPTION value=2 id="t_wep_asc">Secure(WEP)</OPTION>
<OPTION value=4 id="t_wpa">Most Secure(WPA/WPA2-PSK)</OPTION>
</SELECT></TD>
</TR>

<TR id="t_wds_sec_note2">
<TD class="Item" style="padding-left:30px" disabled></TD>
<TD id="t_wds_sec_note2_1" style="color:gray;" disabled>All security settings, for example the wireless password should match the Remote AP.</TD>
</TR>

<TR id="t_wds_auth_type">
<TD class="Item" id="t_authtype" style="padding-left:30px">Auth type:</TD>
<TD><SELECT name="wds_authtype" id="wds_authtype" style = "width:210px">
<OPTION value=1 id="t_open">open</OPTION>
<OPTION value=2 id="t_shared">shared</OPTION>
</SELECT></TD>
</TR>

<TR id="t_wds_key_format">
<TD class="Item" id="t_keyformat" style="padding-left:30px">Key Format:</TD>
<TD>
<SELECT id="wds_keyformat" name="wds_keyformat" style = "width:210px" onChange="doSelKeytype();">
<OPTION value="2" id="t_ascii" selected="selected">ASCII</OPTION>
<OPTION value="3" id="t_hex">Hexadecimal</OPTION>
</SELECT>
</TD>
</TR>

<TR id="t_wds_wep_index">
<TD class="Item" id="t_wepindex" style="padding-left:30px">WEP Index:</TD>
<TD><SELECT name="wds_wepindex" style = "width:210px">
<OPTION value=1>1</OPTION>
<OPTION value=2>2</OPTION>
<OPTION value=3>3</OPTION>
<OPTION value=4>4</OPTION>
</SELECT></TD>
</TR>

<TR id="t_wds_password">
<TD class=Item style="padding-left:30px" id="t_keytext">Wireless Password:</TD>
<TD><INPUT name="wds_keytext" type=text class=text id="wds_keytext"></TD>
</TR>

<SCRIPT type="text/javascript">
if(wzdWlanInf[39] == 6)
{
document.write('<TR><TD colspan=4 class="blue"></TD></TR>');
}
</SCRIPT>
<TR id="t_wds_show">
<TD class=h2  style="FONT-SIZE:15px; FONT-WEIGHT:bold;" name="t_wds_show_1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Local Wireless Setting:</TD>
</TR>

<TR id="t_wds_space">
<TD>&nbsp;</TD>
</TR>

<TR id="t_ssid_ap" ><TD class=Item name ="t_localSsid_1" id ="t_localSsid_1" style="padding-left:30px">Wireless Network Name(SSID):</TD>
<TD><INPUT name="ssid_ap" type="text" class="text" id="ssid_ap" size="32" maxlength="32"><span id="t_wzdssid_tips3">(also called SSID)</span></TD>
</TR>

<TR id="t_ssid_client" ><TD class=Item style="padding-left:55px" name="t_ssid_client_1">Wireless Name of Root AP:</TD>
<TD>
<INPUT name="ssid_client" type="text" class="text" id="ssid_client" size="32" maxlength="32">
<SPAN id="t_wzdssid_tips1">(also called SSID)</SPAN>
</TD>
</TR>	

<TR id="t_ssid_client_mac"><TD class=item style="padding-left:55px"><span id="t_macOfAP1">MAC Address of Root AP:</span></TD>
<TD><input id="mac_client" name="mac_client" type="text" class="text" value="" size="17" maxlength="17"></TD>
</TR>

<TR id="t_ssid_rep" style="display:none">
<TD class=Item id =" t_dhcp_srv" style="padding-left:55px">Repeater Mode:</TD>
<TD colspan=4><INPUT name="uni_wds_r" id="uni_wds_r" type="radio" value="0" checked="checked">
<SPAN id =" t_disable">Universal Repeater</SPAN>
<INPUT name="uni_wds_r" type="radio" id="uni_wds_r" value="1">
<SPAN id =" t_enable">WDS Repeater</SPAN></TD>
<TD></TD>
</TR>

<TR id="t_ssid_rep_name" ><TD class=Item style="padding-left:55px" name="t_ssid_rep_name_1">Wireless Name of Root AP:</TD>
<TD>
<INPUT name="rptSsid" type="text" class="text" id="rptSsid" size="32" maxlength="32">
<SPAN id="t_wzdssid_tips2">(also called SSID)</SPAN>
</TD>
</TR>

<TR id="t_ssid_rep_mac" ><TD class=item style="padding-left:55px"><span id="t_macOfAP1">MAC Address of Root AP:</span></TD>
<TD><input id="rptBssid" name="rptBssid" type="text" class="text" value="" size="17" maxlength="17"></TD>
</TR>

<TR id="t_client_rpt_survey">
<TD class="Item"style="padding-left:60px" disabled></TD>
<TD><INPUT name="survey_c" id="survey" type="button" class="button" value="Survey" onClick="doSurvey();"></TD>
</TR>

<TR id="t_ssid_rep_warn" >
<TD class="Item"style="padding-left:60px" disabled></TD>
<TD  id="t_ssid_rep_warn_1" style="color:gray;" disabled>You can click the Survey button to scan the network SSIDs, <br>and then choose the target one to setup the connection.</TD>
</TR>

<TR id="t_ssid_client_wds" >
<SCRIPT type="text/javascript">
document.getElementById("t_ssid_client_wds").style.display="none";
</SCRIPT>
<TD class="Item" style="padding-left:60px">&nbsp;</TD><TD><INPUT name="t_wds_enable" id="wds_enable" type="checkbox" value="2">Enable WDS</TD>
</TR>

<TR id="t_ssid_multi_vlan" >
<td class=item style="padding-left:130px"><span id="t_enVLAN">Enable VLAN:</span></td>
<TD><input name="vlanEnable" id="vlanEnable" type="radio" value="1" onClick="onVlanEnable(1);"><span id="t_VLAN_OFF">OFF</span>
&nbsp;&nbsp;&nbsp;
<input name="vlanEnable" id="vlanEnable" type="radio" value="2" onClick="onVlanEnable(2);"><span id="t_VLAN_ON">ON</span></TD>
</TR>
<TR id="t_ssid_multi_1" >
<TD class=item style="padding-left:130px">SSID1: </TD>
<TD><INPUT class="text" id=ssid1 name="ssid1" maxLength=32 size=32 onChange="doChangeSsid(1);"><span style="FONT-WEIGHT: bold;">&nbsp;&nbsp;&nbsp;&nbsp;VLAN&nbsp;ID:&nbsp;&nbsp;</span><INPUT class="text" name="vlanId1" value=1 maxLength=4 size=4></TD>
</TR>
<TR id="t_ssid_multi_2" >
<TD class=item style="padding-left:60px"><input type=checkbox name=chk_ssid2 id=chk_ssid2 value="2" onclick="doAddSsid(2);">&nbsp;&nbsp;&nbsp;SSID2: </TD>
<TD><INPUT class="text" id=ssid2 name="ssid2" maxLength=32 size=32 onChange="doChangeSsid(2);"><span style="FONT-WEIGHT: bold;">&nbsp;&nbsp;&nbsp;&nbsp;VLAN&nbsp;ID:&nbsp;&nbsp;</span><INPUT class="text" name="vlanId2" value=1 maxLength=4 size=4></TD>
</TR>
<TR id="t_ssid_multi_3" >
<TD class=item style="padding-left:60px"><input type=checkbox name=chk_ssid3 id=chk_ssid3 value="2" onclick="doAddSsid(3);">&nbsp;&nbsp;&nbsp;SSID3: </TD>
<TD><INPUT class="text" id=ssid3 name="ssid3" maxLength=32 size=32 onChange="doChangeSsid(3);"><span style="FONT-WEIGHT: bold;">&nbsp;&nbsp;&nbsp;&nbsp;VLAN&nbsp;ID:&nbsp;&nbsp;</span><INPUT class="text" name="vlanId3" value=1 maxLength=4 size=4></TD>
</TR>
<TR id="t_ssid_multi_4" >
<TD class=item style="padding-left:60px"><input type=checkbox name=chk_ssid4 id=chk_ssid4 value="2" onclick="doAddSsid(4);">&nbsp;&nbsp;&nbsp;SSID4: </TD>
<TD><INPUT class="text" id=ssid4 name="ssid4" maxLength=32 size=32 onChange="doChangeSsid(4);"><span style="FONT-WEIGHT: bold;">&nbsp;&nbsp;&nbsp;&nbsp;VLAN&nbsp;ID:&nbsp;&nbsp;</span><INPUT class="text" name="vlanId4" value=1 maxLength=4 size=4></TD>
</TR>

<TR id="t_region_r" style="display:none;">
<TD class=Item id="t_region">Region:</TD>
<TD><select name=region id=Region class="listL" onChange="changeRegion();doDnySetRegion();">
<SCRIPT type="text/javascript">
var regionIndex = 0;
var oldRegion;
for (var i = 0; i < wzdWlanInf[3]; i++)
{
regionIndex = regionIndex + 4;
if (oldRegion == regionInfo[regionIndex - 4])
{
continue;
}
document.write('<option value='+i+'>'+regionInfo[regionIndex-4]+'<\/option>');
oldRegion = regionInfo[regionIndex-4];
}
document.forms[0].region.value = wzdWlanInf[4];
</SCRIPT></select>
</TD>
</TR>

<TR id=t_region_warn style="display:none;">
<TD class="Item"   id="t_lwarn" class=item style="padding-left:60px" disabled>Warning:<br>&nbsp;</br></TD>
<TD  id="t_region_warn_1" style="color:gray;" disabled>Ensure you select a correct country to conform local law.<br>Incorrect settings may cause interference. </TD>
</TR>

<TR id="t_client_sec_selected" style="display:none">
<TD class="Item"style="padding-left:60px" disabled></TD>
<TD style="color:#C11C66" name="t_client_sec_selected_1">The Security Mode of Root AP is selected.</TD>
</TR>

<TR id="t_cliet_sec_note" style="display:none">
<TD class="Item"style="padding-left:60px" disabled></TD>
<TD style="color:#C11C66" name="t_cliet_sec_note_1">The Security Mode of Root AP is WEP. Please selected Type, 
<br/>meanwhile choose WEP Key Format and Key index.</TD>
</TR>

<TR id="t_channel" >
<TD class=item style="padding-left:60px" id="t_ochannelname">Channel:</TD>
<TD><SELECT name="channel" id=channel class="listL" id="channel"></SELECT></TD>
</TR>

<TR id="line_wlMode" style="display:none">
<TD class="Item" id="t_mode" class=item style="padding-left:60px">Mode:</TD>
<TD><SELECT name="mode" style = "width:110px" onChange="changeRegion();"></SELECT></TD>
</TR>

<TR id="line_rate" style="display:none">
<TD class="Item" id="t_rate" class=item style="padding-left:60px">Max Tx Rate:</TD>
<TD><SELECT name="rate" style = "width:110px"></SELECT></TD>
</TR>

<TR id=t_bridge_ssid_space >
<TD>&nbsp;</TD>
</TR>
<TR id="t_bridge_ssid_scan" ><TD class=item style="padding-left:60px">Add a remote AP:</TD>
<TD align="left"><INPUT name="survey_c" id="survey" type="button" class="button" value="Survey" onClick="doSurvey();"></TD></TR>
<TR id="t_bridge_ssid_1" ><TD class=item style="padding-left:60px"><span id="t_mac_r_a1">MAC of remote AP1:</span></TD>
<TD><input id="mptBssid1" name="mptBssid1" type="text" class="text" value="" size="17" maxlength="17"></TD></TR>
<TR id="t_bridge_ssid_2" ><TD class=item style="padding-left:60px"><span id="t_mac_r_a2">MAC of remote AP2:</span></TD>
<TD><input id="mptBssid2" name="mptBssid2" type="text" class="text" value="" size="17" maxlength="17"></TD></TR>
<TR id="t_bridge_ssid_3" ><TD class=item style="padding-left:60px"><span id="t_mac_r_a3">MAC of remote AP3:</span></TD>
<TD><input id="mptBssid3" name="mptBssid3" type="text" class="text" value="" size="17" maxlength="17"></TD></TR>
<TR id="t_bridge_ssid_4" ><TD class=item style="padding-left:60px"><span id="t_mac_r_a4">MAC of remote AP4:</span></TD>
<TD><input id="mptBssid4" name="mptBssid4" type="text" class="text" value="" size="17" maxlength="17"></TD></TR>
<TR id="t_bridge_ssid_warn" ><TD class="Item" class=item style="padding-left:60px" disabled></TD>
<TD  id="t_warnNote_1" style="color:gray;" disabled>To setup the bridge network, you should make sure the nearby <br>access point use the same channel and security mode.</TD>
</TR>	

<SCRIPT type="text/javascript">
if(wzdWlanInf[39] == 1)
{
document.write('<TR><TD colspan=4 class="blue"></TD></TR>');
document.write('<TR><TD></TD></TR>');
}		
</SCRIPT>


<TR id="t_multi_sec">
<TD class="Item" style="padding-left:60px">SSID:</TD>
<TD>
<select name="multi_sec" id="multi_sec" class="listL" onChange="changeSecforSsid();changeSecurity();">
<option id=ssid1_sec_en name=ssid1_sec_en value="0"><span>SSID1</span></option>
<option id=ssid2_sec_en name=ssid2_sec_en value="1">SSID2</option>
<option id=ssid3_sec_en name=ssid3_sec_en value="2">SSID3</option>
<option id=ssid4_sec_en name=ssid4_sec_en value="3">SSID4</option>	
</select>
</TD>
</TR>

<TR id="t_wds_mode" style="display:none;">
<TD class="Item" id="t_addrType">WDS Mode:</TD>
<TD>
<SELECT name="addrType" class="listS">
<OPTION value=1 id="t_auto" name="t_auto">Auto</OPTION>
<OPTION value=2 name="t_three">WDS1</OPTION>
<OPTION value=3 name="t_four">WDS2</OPTION>
</SELECT>
</TD>
</TR>

<TR id="t_sec_mode">
<TD class="Item" style="padding-left:60px;" name="t_sec_mode_1">Wireless Security Mode:</TD>
<TD><select name="secType" id="secType" class="listL" onChange="changeSecurity();" style="width:210px">
<option value="0" name="t_no_security_1" >No Security</option>
<SCRIPT type="text/javascript">
if(wzdWlanInf[39] != 1)
{
document.write('<option id=\"t_wep_muilt\" value=\"1\">Secure(WEP)<\/option>');
}
if(wzdWlanInf[39] != 7)
{
document.write('<option id=\"t_wpa_bridge\" value=\"3\">Most Secure(WPA/WPA2-PSK)<\/option>');
}
</SCRIPT>
</SELECT>
</TD>
</TR>

<SCRIPT type="text/javascript">
if(wzdWlanInf[39] >= 3 && wzdWlanInf[39] <= 5)
{
document.write('<TR id="t_wds_sec_note2"><TD class="Item" style="padding-left:30px" disabled></TD>');
document.write('<TD id="t_wds_sec_note2_1" style="color:gray;" disabled>All security settings, for example the wireless password should match the Root AP.</TD></TR>');
}	
</SCRIPT>

<TR id=t_none_warn>
<TD class="Item" style="padding-left:60px;" disabled></TD>
<TD name="t_none_warn_1" style="color:gray;" disabled >If you choose No Security mode, the wireless stations will be able to connect <br>the AP without encryption. It is recommened strongly that you choose one of <br>following options to enable security.</TD>
</TR>

<TR id="t_random" style="display:none;">
<TD class="Item" style="padding-left:60px;">&nbsp;</TD>
<TD><INPUT type="button" class="buttonL" name="random" id="random" value="Generate A Random Key" style="color:#C11C66;FONT-SIZE:12px;" onclick="randomsec()"></TD>
</TR>

<TR id="t_s_wep" >
<TD class="Item" style="padding-left:60px;">KEY:</TD>
<TD><INPUT type="text" class="text" name="wepSecret" id="wepSecret" maxLength=32 size=32 value=""></TD>
</TR>

<TR id="t_s_wep_type">
<TD class="Item" style="padding-left:60px;"><SPAN id="t_type">Type:</SPAN></TD>
<TD><SELECT name=wepSecOpt class="list" id=wepSecOpt>
<OPTION value="3" id="t_auto" name="t_auto">Automatic</OPTION>
<OPTION value="1" id="t_open_sys">Open System</OPTION>
<OPTION value="2" id="t_shared_key">Shared Key</OPTION>
</SELECT></TD>
</TR>

<TR id="t_s_wep_form">
<TD class="Item" style="padding-left:60px;" id="t_wep_key_fmt">WEP Key Format:</TD>
<TD><SELECT name=keytype class=list id=keytype onChange="setKey();">
<OPTION value=1 id="t_hex">Hexadecimal</OPTION>
<OPTION value=2 id="t_ascii">ASCII</OPTION>
</SELECT></TD>
</TR>

<TR id="t_s_wep_key">
<TD style="padding-left:30px"><TABLE border=0>
<TR><TD class="Item" style="padding-left:60px;" id="t_key_sel">Key Selected</TD></TR>
<SCRIPT type="text/javascript">
var j;
for (var i=1; i<5; i++)
{
j = i-1;
document.write('<TR><TD class=ListC1 style="padding-left:60px"><span id="t_key">Clé</span> '+i+':&nbsp;<input type=radio id=keynum name=keynum value='+i+'></TD></TR>');
}
</SCRIPT></TABLE>
</TD>

<TD><TABLE border=0>
<TR>
<TD style="font-size:13px;font-weight:bold;" id="t_wep_key">WEP Key</TD>
<TD style="font-size:13px;font-weight:bold;" id="t_key_type">Key Type</TD>
<TD style = "width:100%">&nbsp;</TD>
</TR>
<SCRIPT type="text/javascript">
var j;
for (var i=1; i<5; i++)
{
j = i-1;
document.write('<TR><TD><input type=text class=text id=key'+i+' name=key'+i+' maxLength=32 size=32 value="" onfocus="if(key'+i+'dis) this.blur();else this.form.keynum['+j+'].checked=true;"></td>');
document.write('<TD><select name=length'+i+'  id=length'+i+' onchange="setKey();">');
document.write('<option value=0 id="t_disable">Désactivé</option>');
document.write('<option value=5 id="t_64">64bit</option>');
document.write('<option value=13 id="t_128">128bit</option>');
document.write('<option value=16 id="t_152">152bit</option>');
document.write('</select></td>');
document.write('<td style = "width:100%">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>');
}
</SCRIPT>
</TABLE>
</TD>
</TR>

<TR id="t_warn_wep" >
<TD class="Item" style="padding-left:60px;" disabled></TD>
<TD style="COLOR: gray;" id="t_warn_wep_1" disabled>We do not recommend using the WEP encryption if the device operates in <br>802.11n mode due to the fact that WEP is not supported by 802.11n specification.</TD>
</TR>

<TR id="t_s_psk_ver">
<TD class="Item" style="padding-left:60px;" id="t_type">Version:</TD>
<TD><SELECT name="pskSecOpt" class="list" id="pskSecOpt" style="width:180px">
<OPTION value="3" id="t_auto" name="t_auto">Automatic(Recommended)</OPTION>
<OPTION value="1">WPA-Personal</OPTION>
<OPTION value="2">WPA2-Personal</OPTION>
</SELECT></TD>
</TR>

<TR id="t_s_psk_encry">
<TD class="Item" style="padding-left:60px" id="t_encrypt">Encryption:</TD>
<TD><SELECT name=pskCipher class=list id=pskCipher style="width:180px">
<SCRIPT type="text/javascript">
if(wzdWlanInf[18] != 3)
{
document.write('<option value="1" id="t_auto" name="t_auto">Automatic(Recommended)</option>');
document.write('<option value="2">TKIP</option>');
}
</SCRIPT>
<OPTION value="3">AES</OPTION>
</SELECT>
</TD>
</TR>

<TR id="t_s_psk">
<TD class="Item" style="padding-left:60px;" id="t_psk_pwd">Wireless Password:</TD>
<TD><INPUT name=pskSecret type=text class=text id="pskSecret" value="" size="32"></TD>
</TR>

<TR id="t_warn_psk" >
<TD class="Item" style="padding-left:60px;" disabled></TD>
<TD style="color:gray;" disabled><span name="t_warn_psk_1">You can enter ASCII or Hexadecimal characters. For Hexadecimal, the length should <br>
be between 8 and 64 characters; for ASCII, the length should be between 8 and 63 <br>
characters. For good security it should be of ample length and should not be a <br>
commonly known pharse.</span> </TD>
</TR>

<TR id="t_s_psk_per">
<TD class="Item" style="padding-left:60px;" id="t_key_update_prd">Group Key Update Period:</TD>
<TD><INPUT name=interval type=text class=text id="interval" value="0" size="9" maxlength="9">
<A id="t_key_update_prd_note">(in second, minimum is 30, 0 means no update)</A></TD>
</TR>

<TR id="t_multi_save">
<TD>&nbsp;</TD>
<TD><INPUT name="Save" type="button" class="buttonBig" id="Save" value="Save" onClick="doSave();" title="You can click this button to save the security for each ssid!"></TD>
</TR>	

<TR id="t_ext_ssid_title" class="Item" style="padding-left:60px;" >
<TD class="Item" style="padding-left:55px"><span id="t_ExtenderSSID">Wireless Name of Range Extender: </span></TD>
<TD><INPUT type="radio" value="0" name="copyFromRootAp" onclick="ExtSSIDstyle(0)"><span id="t_copy_ssid">Copy from Root AP</span></INPUT></TD>
</TR>
<TR id="t_ext_ssid_name" class="item" style="padding-left:60px;">
<TD class="Item" style="padding-left:55px"><span id="t_ExtenderSSIDName"></span></TD>
<TD><INPUT type="text" value="" id="extssidname" size="32" maxlength="32" readonly="readonly"></INPUT></TD>
</TR>
<TR id="t_ext_ssid_title2" class="Item" style="padding-left:60px;" >
<TD class="Item" style="padding-left:55px"><span id="t_ExtenderSSID2"></span></TD>
<TD><INPUT type="radio" value="1" name="copyFromRootAp" onclick="ExtSSIDstyle(1)"><span id="t_custom_ssid">Customize</span></INPUT></TD>
</TR>
<TR id="t_ext_ssid_name2" class="item" style="padding-left:60px;">
<TD class="Item" style="padding-left:55px"><span id="t_ExtenderSSIDName2"></span></TD>
<TD><INPUT type="text" value="" name="extssidname2" id="extssidname2" size="32" maxlength="32" ></INPUT></TD>
</TR>


</TABLE>
</TR>

</TABLE>
</TR>

<TR>
<TABLE>
<TR>
<TD colspan=5 class="blue"></TD>
</TR>

<TR>
<TD>&nbsp;&nbsp;</TD>
<TD colspan=4 class=mbtn>
<INPUT name="Return" type="button" class="buttonBig" id="Return" value="Back" onClick="doBack();">
&nbsp; &nbsp;&nbsp;&nbsp;
<INPUT name="Next" type="Submit" class="buttonBig" id="Next"  value="Next">
<INPUT type="hidden" name="operMode" id="operMode" value="">
<INPUT type="hidden" name="ssid_type1" id="ssid_type1" value="4">
<INPUT type="hidden" name="ssid_type2" id="ssid_type2" value="4">
<INPUT type="hidden" name="ssid_type3" id="ssid_type3" value="4">
<INPUT type="hidden" name="ssid_type4" id="ssid_type4" value="4">
<INPUT type="hidden" name="ssid_sec1" id="ssid_sec1" value="">
<INPUT type="hidden" name="ssid_sec2" id="ssid_sec2" value="">
<INPUT type="hidden" name="ssid_sec3" id="ssid_sec3" value="">
<INPUT type="hidden" name="ssid_sec4" id="ssid_sec4" value="">
</TD>
</TR>

</TABLE>
</TR>

</TBODY>	
</TABLE>  
</FORM>
<P style="display:none" id="t_ssid_input_any" name="t_ssid_input_any">Please input SSID</P>
<P style="display:none" id="t_check_button" name="t_check_button">If you want config this ssid, please choose the checkbox ahead!</P>
<P style="display:none" id="t_same_wep_index">If your Local Wireless and Wireless Bridge use WEP with the same index, the passwords sholud be same. Do you want to make the passwords are the same ?</p>
</BODY>
</HTML>
<SCRIPT type="text/javascript">
if (wzdWlanInf[39] == 4)
{
document.getElementById("t_wds_mode").style.display = "";
document.forms[0].addrType.value = wzdWlanInf[47];
}

changeRegion();
var i = 0, j = 0;
switch(wzdWlanInf[39])
{
case 0: j = 1;	break;
case 1: j = 2;
document.forms[0].vlanEnable[0].checked = true;
onVlanEnable(1);
break;
case 3: j = 3;	
document.forms[0].wds_enable.checked = false;
break;
case 4: j = 4; 
document.forms[0].uni_wds_r[0].checked = true;
break;
case 6:	j = 5;	break;
case 7: j = 6;	break;
default: j = 1; break;
}
i = 0;
while( t_zujian[7 * i] != 1 )
{
if( 0 == t_zujian[7 * i + j] )
document.getElementById(t_zujian[7 * i]).style.display = "none";
i++;
}
document.forms[0].ssid_ap.value = wzdWlanInf[1];
if(wzdWlanInf[46])
{
document.forms[0].ssid_client.value = wzdWlanInf[26];
document.forms[0].mac_client.value = wzdWlanInf[27];
}

if(wzdWlanInf[25])
document.forms[0].wds_enable.checked = true;
else
document.forms[0].wds_enable.checked = false;
if(wzdWlanInf[39] ==4)
{
if(wzdWlanInf[19] == 4)
{
if(wzdWlanInf[46])
{	
document.forms[0].rptBssid.value = wzdWlanInf[28];
document.forms[0].rptSsid.value = wzdWlanInf[43];
}	
document.forms[0].uni_wds_r[1].checked = true;
}
else if(wzdWlanInf[19] == 5)
{
if(wzdWlanInf[46])
{
document.forms[0].rptBssid.value = wzdWlanInf[29];
document.forms[0].rptSsid.value = wzdWlanInf[44];
}
document.forms[0].uni_wds_r[0].checked = true;
}
else
document.forms[0].uni_wds_r[0].checked = true;

if(wzdWlanInf[48] == 0)
document.forms[0].copyFromRootAp[0].checked = true;
else
document.forms[0].copyFromRootAp[1].checked = true;
document.forms[0].extssidname2.value = wzdWlanInf[49];
}

if(wzdWlanInf[39] == 6)//wds
{
if(wzdWlanInf[46])
{
document.forms[0].brlssid.value = wzdApBridgePara[0];
document.forms[0].brlbssid.value = wzdApBridgePara[1];
if(wzdApBridgePara[2] == 2 || wzdApBridgePara[2] == 3)
{
document.forms[0].wds_keytype.value = 2;	//wep
document.forms[0].wds_keyformat.value = wzdApBridgePara[2];	//asii or hex
}
else
{
document.forms[0].wds_keytype.value = wzdApBridgePara[2];
}
document.forms[0].wds_wepindex.value = wzdApBridgePara[3];   
document.forms[0].wds_authtype.value = wzdApBridgePara[4];
document.forms[0].wds_keytext.value = wzdApBridgePara[5];		
}
else
{
document.forms[0].wds_keytype.value = 4;
}
document.getElementById("t_localSsid_1").innerHTML = "Local Wireless Name:";
}
document.forms[0].ssid1.value = wzdWlanInf[1];
document.forms[0].ssid2.value = wzdWlanInf[22];
document.forms[0].ssid3.value = wzdWlanInf[23];
document.forms[0].ssid4.value = wzdWlanInf[24];
if(wzdWlanInf[40])
document.forms[0].chk_ssid2.checked = true;
else
document.forms[0].chk_ssid2.checked = false;

if(wzdWlanInf[41])
document.forms[0].chk_ssid3.checked = true;
else
document.forms[0].chk_ssid3.checked = false;

if(wzdWlanInf[42])
document.forms[0].chk_ssid4.checked = true;
else
document.forms[0].chk_ssid4.checked = false;

if(wzdWlanInf[38])
{
document.forms[0].vlanEnable[1].checked = true;
onVlanEnable(2);
document.forms[0].vlanId1.value = wzdWlanInf[34];
document.forms[0].vlanId2.value = wzdWlanInf[35];
document.forms[0].vlanId3.value = wzdWlanInf[36];
document.forms[0].vlanId4.value = wzdWlanInf[37];
}
else
document.forms[0].vlanEnable[1].checked = false;

document.forms[0].Region.value = wzdWlanInf[4];
if(wzdWlanInf[39] == 3 || wzdWlanInf[39] == 4 || wzdWlanInf[39] == 7)
{
if(wzdWlanInf[10] == 15)
document.forms[0].channel.value = 6;
else
document.forms[0].channel.value = wzdWlanInf[10];
}
else
document.forms[0].channel.value = wzdWlanInf[10];
document.forms[0].mptBssid1.value = wzdWlanInf[30];
document.forms[0].mptBssid2.value = wzdWlanInf[31];
document.forms[0].mptBssid3.value = wzdWlanInf[32];
document.forms[0].mptBssid4.value = wzdWlanInf[33];

if(!wzdWlanInf[13])//security disable
{
document.forms[0].secType.value = 0;
}
else
{
document.forms[0].secType.value = wzdWlanInf[14];
if( wzdWlanInf[39] == 0 && wzdWlanInf[14] ==2)//access point && wpa/wpa2
{
document.forms[0].secType.value = 0;	//wzd page change to none
}
else if(wzdWlanInf[39] == 1)//multi ssid
{
if(wzdWlanInf[14] == 1)
document.forms[0].secType.value = 0;	//wep change to  none
else if(wzdWlanInf[14] == 2)
{
document.forms[0].secType.value = 0;	//wzd page change to none
}
}
else if((wzdWlanInf[39] >= 3 && wzdWlanInf[39] <= 5) && wzdWlanInf[14] == 2)//client ,rpt,urpt,wds
{
document.forms[0].secType.value = 0;	//wpa/wpa2 change to none
}
else if(wzdWlanInf[39] == 7 && (wzdWlanInf[14] == 2 || wzdWlanInf[14] == 3))//Bridge with Ap
{
document.forms[0].secType.value = 0;	//wpa/wpa2 and wpa/wpa2-psk change to none
}
}

document.forms[0].wepSecret.value = wlanList[2*(secInf[2]-1)];
document.forms[0].wepSecOpt.value = secInf[0];
document.forms[0].keytype.value = secInf[1];
if(secInf[2] >0 && secInf[2] < 5)
document.forms[0].keynum[secInf[2]-1].checked = true;
document.forms[0].key1.value = wlanList[0];
document.forms[0].key2.value = wlanList[2];
document.forms[0].key3.value = wlanList[4];
document.forms[0].key4.value = wlanList[6];
document.forms[0].length1.value = wlanList[1];
document.forms[0].length2.value = wlanList[3];
document.forms[0].length3.value = wlanList[5];
document.forms[0].length4.value = wlanList[7];

if(wzdWlanInf[39] >= 3 && wzdWlanInf[39] <= 5 && wzdWlanInf[46] == 0)
{
document.forms[0].secType.value = 3;	//wpa/wpa2-psk
document.forms[0].pskSecOpt.value = 3;	//auto
document.forms[0].pskCipher.value = 1;	//auto
}
else
{
document.forms[0].pskSecOpt.value = secInf[7];
document.forms[0].pskCipher.value = secInf[8];
document.forms[0].pskSecret.value = secInf[9];
}
document.forms[0].pskSecret.maxLength = 64;
document.forms[0].interval.value = 0;

document.forms[0].ssid_sec1.value = secInf[9];	
document.forms[0].ssid_type1.value = (secInf[10] == 1) ? 0 : secInf[10];
document.forms[0].ssid_sec2.value = secInf[13];	
document.forms[0].ssid_type2.value = (secInf[14] == 1) ? 0 : secInf[14];
document.forms[0].ssid_sec3.value = secInf[17];	
document.forms[0].ssid_type3.value = (secInf[18] == 1) ? 0 : secInf[18];
document.forms[0].ssid_sec4.value = secInf[21];	
document.forms[0].ssid_type4.value = (secInf[22] == 1) ? 0 : secInf[22];
aftersurvey();
changeSecurity();
setKey();
if(wzdWlanInf[39] == 1)
{
if(wzdWlanInf[41])
{
doAddSsid(4);
}
else if(wzdWlanInf[40])
{
doAddSsid(3);
}
else
{
doAddSsid(2);
}	
}
doSelKeytype();
if(wzdWlanInf[39] ==4)
{
if (wzdWlanInf[48] == 1)
{
ExtSSIDstyle(1);
}
else
{
ExtSSIDstyle(0);
}
}
</SCRIPT>
